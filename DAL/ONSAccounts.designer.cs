#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ONSAccounts")]
	public partial class ONSAccountsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertAllTransaction(AllTransaction instance);
    partial void UpdateAllTransaction(AllTransaction instance);
    partial void DeleteAllTransaction(AllTransaction instance);
    partial void InsertBudget(Budget instance);
    partial void UpdateBudget(Budget instance);
    partial void DeleteBudget(Budget instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertControlAccount(ControlAccount instance);
    partial void UpdateControlAccount(ControlAccount instance);
    partial void DeleteControlAccount(ControlAccount instance);
    partial void InsertControlSecurity(ControlSecurity instance);
    partial void UpdateControlSecurity(ControlSecurity instance);
    partial void DeleteControlSecurity(ControlSecurity instance);
    partial void InsertControlSecurityAssign(ControlSecurityAssign instance);
    partial void UpdateControlSecurityAssign(ControlSecurityAssign instance);
    partial void DeleteControlSecurityAssign(ControlSecurityAssign instance);
    partial void InsertDailyLedger(DailyLedger instance);
    partial void UpdateDailyLedger(DailyLedger instance);
    partial void DeleteDailyLedger(DailyLedger instance);
    partial void InsertFeature(Feature instance);
    partial void UpdateFeature(Feature instance);
    partial void DeleteFeature(Feature instance);
    partial void InsertFeatureType(FeatureType instance);
    partial void UpdateFeatureType(FeatureType instance);
    partial void DeleteFeatureType(FeatureType instance);
    partial void InsertGroupAccount(GroupAccount instance);
    partial void UpdateGroupAccount(GroupAccount instance);
    partial void DeleteGroupAccount(GroupAccount instance);
    partial void InsertIDType(IDType instance);
    partial void UpdateIDType(IDType instance);
    partial void DeleteIDType(IDType instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertMenuSecurity(MenuSecurity instance);
    partial void UpdateMenuSecurity(MenuSecurity instance);
    partial void DeleteMenuSecurity(MenuSecurity instance);
    partial void InsertMenuSecurityAssign(MenuSecurityAssign instance);
    partial void UpdateMenuSecurityAssign(MenuSecurityAssign instance);
    partial void DeleteMenuSecurityAssign(MenuSecurityAssign instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertSecurityQuestion(SecurityQuestion instance);
    partial void UpdateSecurityQuestion(SecurityQuestion instance);
    partial void DeleteSecurityQuestion(SecurityQuestion instance);
    partial void InsertSubsidiaryAccount(SubsidiaryAccount instance);
    partial void UpdateSubsidiaryAccount(SubsidiaryAccount instance);
    partial void DeleteSubsidiaryAccount(SubsidiaryAccount instance);
    partial void InsertUserDepartment(UserDepartment instance);
    partial void UpdateUserDepartment(UserDepartment instance);
    partial void DeleteUserDepartment(UserDepartment instance);
    partial void InsertUserLevel(UserLevel instance);
    partial void UpdateUserLevel(UserLevel instance);
    partial void DeleteUserLevel(UserLevel instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertVoucher(Voucher instance);
    partial void UpdateVoucher(Voucher instance);
    partial void DeleteVoucher(Voucher instance);
    partial void InsertVoucherDetail(VoucherDetail instance);
    partial void UpdateVoucherDetail(VoucherDetail instance);
    partial void DeleteVoucherDetail(VoucherDetail instance);
    partial void InsertYearEndClosing(YearEndClosing instance);
    partial void UpdateYearEndClosing(YearEndClosing instance);
    partial void DeleteYearEndClosing(YearEndClosing instance);
    partial void InsertIDNumber(IDNumber instance);
    partial void UpdateIDNumber(IDNumber instance);
    partial void DeleteIDNumber(IDNumber instance);
    partial void InsertUserEntryExit(UserEntryExit instance);
    partial void UpdateUserEntryExit(UserEntryExit instance);
    partial void DeleteUserEntryExit(UserEntryExit instance);
    #endregion
		
		public ONSAccountsDataContext() : 
				base(global::DAL.Properties.Settings.Default.ONSAccountsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ONSAccountsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ONSAccountsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ONSAccountsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ONSAccountsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<AllTransaction> AllTransactions
		{
			get
			{
				return this.GetTable<AllTransaction>();
			}
		}
		
		public System.Data.Linq.Table<Budget> Budgets
		{
			get
			{
				return this.GetTable<Budget>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<ControlAccount> ControlAccounts
		{
			get
			{
				return this.GetTable<ControlAccount>();
			}
		}
		
		public System.Data.Linq.Table<ControlSecurity> ControlSecurities
		{
			get
			{
				return this.GetTable<ControlSecurity>();
			}
		}
		
		public System.Data.Linq.Table<ControlSecurityAssign> ControlSecurityAssigns
		{
			get
			{
				return this.GetTable<ControlSecurityAssign>();
			}
		}
		
		public System.Data.Linq.Table<DailyLedger> DailyLedgers
		{
			get
			{
				return this.GetTable<DailyLedger>();
			}
		}
		
		public System.Data.Linq.Table<Feature> Features
		{
			get
			{
				return this.GetTable<Feature>();
			}
		}
		
		public System.Data.Linq.Table<FeatureType> FeatureTypes
		{
			get
			{
				return this.GetTable<FeatureType>();
			}
		}
		
		public System.Data.Linq.Table<GroupAccount> GroupAccounts
		{
			get
			{
				return this.GetTable<GroupAccount>();
			}
		}
		
		public System.Data.Linq.Table<Hacker> Hackers
		{
			get
			{
				return this.GetTable<Hacker>();
			}
		}
		
		public System.Data.Linq.Table<IDType> IDTypes
		{
			get
			{
				return this.GetTable<IDType>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<MenuSecurity> MenuSecurities
		{
			get
			{
				return this.GetTable<MenuSecurity>();
			}
		}
		
		public System.Data.Linq.Table<MenuSecurityAssign> MenuSecurityAssigns
		{
			get
			{
				return this.GetTable<MenuSecurityAssign>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<SecurityQuestion> SecurityQuestions
		{
			get
			{
				return this.GetTable<SecurityQuestion>();
			}
		}
		
		public System.Data.Linq.Table<SecurityQuestionAnswer> SecurityQuestionAnswers
		{
			get
			{
				return this.GetTable<SecurityQuestionAnswer>();
			}
		}
		
		public System.Data.Linq.Table<SubsidiaryAccount> SubsidiaryAccounts
		{
			get
			{
				return this.GetTable<SubsidiaryAccount>();
			}
		}
		
		public System.Data.Linq.Table<UserDepartment> UserDepartments
		{
			get
			{
				return this.GetTable<UserDepartment>();
			}
		}
		
		public System.Data.Linq.Table<UserLevel> UserLevels
		{
			get
			{
				return this.GetTable<UserLevel>();
			}
		}
		
		public System.Data.Linq.Table<UserLoginAssign> UserLoginAssigns
		{
			get
			{
				return this.GetTable<UserLoginAssign>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UsersDetail> UsersDetails
		{
			get
			{
				return this.GetTable<UsersDetail>();
			}
		}
		
		public System.Data.Linq.Table<Voucher> Vouchers
		{
			get
			{
				return this.GetTable<Voucher>();
			}
		}
		
		public System.Data.Linq.Table<VoucherDetail> VoucherDetails
		{
			get
			{
				return this.GetTable<VoucherDetail>();
			}
		}
		
		public System.Data.Linq.Table<YearEndClosing> YearEndClosings
		{
			get
			{
				return this.GetTable<YearEndClosing>();
			}
		}
		
		public System.Data.Linq.Table<IDNumber> IDNumbers
		{
			get
			{
				return this.GetTable<IDNumber>();
			}
		}
		
		public System.Data.Linq.Table<UserEntryExit> UserEntryExits
		{
			get
			{
				return this.GetTable<UserEntryExit>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accounts")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _GroupId;
		
		private string _ControlId;
		
		private string _SubsidiaryId;
		
		private string _AccountsId;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _OpeningDate;
		
		private System.Nullable<double> _OpeningBalance;
		
		private string _Type;
		
		private string _CompanyId;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private string _EntryBy;
		
		private EntitySet<AllTransaction> _AllTransactions;
		
		private EntitySet<Budget> _Budgets;
		
		private EntitySet<DailyLedger> _DailyLedgers;
		
		private EntitySet<VoucherDetail> _VoucherDetails;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<ControlAccount> _ControlAccount;
		
		private EntityRef<GroupAccount> _GroupAccount;
		
		private EntityRef<SubsidiaryAccount> _SubsidiaryAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIdChanging(string value);
    partial void OnGroupIdChanged();
    partial void OnControlIdChanging(string value);
    partial void OnControlIdChanged();
    partial void OnSubsidiaryIdChanging(string value);
    partial void OnSubsidiaryIdChanged();
    partial void OnAccountsIdChanging(string value);
    partial void OnAccountsIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOpeningDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOpeningDateChanged();
    partial void OnOpeningBalanceChanging(System.Nullable<double> value);
    partial void OnOpeningBalanceChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    partial void OnDateOfEntryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEntryChanged();
    partial void OnEntryByChanging(string value);
    partial void OnEntryByChanged();
    #endregion
		
		public Account()
		{
			this._AllTransactions = new EntitySet<AllTransaction>(new Action<AllTransaction>(this.attach_AllTransactions), new Action<AllTransaction>(this.detach_AllTransactions));
			this._Budgets = new EntitySet<Budget>(new Action<Budget>(this.attach_Budgets), new Action<Budget>(this.detach_Budgets));
			this._DailyLedgers = new EntitySet<DailyLedger>(new Action<DailyLedger>(this.attach_DailyLedgers), new Action<DailyLedger>(this.detach_DailyLedgers));
			this._VoucherDetails = new EntitySet<VoucherDetail>(new Action<VoucherDetail>(this.attach_VoucherDetails), new Action<VoucherDetail>(this.detach_VoucherDetails));
			this._Company = default(EntityRef<Company>);
			this._ControlAccount = default(EntityRef<ControlAccount>);
			this._GroupAccount = default(EntityRef<GroupAccount>);
			this._SubsidiaryAccount = default(EntityRef<SubsidiaryAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="VarChar(2)")]
		public string GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._GroupAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlId", DbType="VarChar(4)")]
		public string ControlId
		{
			get
			{
				return this._ControlId;
			}
			set
			{
				if ((this._ControlId != value))
				{
					if (this._ControlAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnControlIdChanging(value);
					this.SendPropertyChanging();
					this._ControlId = value;
					this.SendPropertyChanged("ControlId");
					this.OnControlIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubsidiaryId", DbType="VarChar(10)")]
		public string SubsidiaryId
		{
			get
			{
				return this._SubsidiaryId;
			}
			set
			{
				if ((this._SubsidiaryId != value))
				{
					if (this._SubsidiaryAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubsidiaryIdChanging(value);
					this.SendPropertyChanging();
					this._SubsidiaryId = value;
					this.SendPropertyChanged("SubsidiaryId");
					this.OnSubsidiaryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountsId", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AccountsId
		{
			get
			{
				return this._AccountsId;
			}
			set
			{
				if ((this._AccountsId != value))
				{
					this.OnAccountsIdChanging(value);
					this.SendPropertyChanging();
					this._AccountsId = value;
					this.SendPropertyChanged("AccountsId");
					this.OnAccountsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpeningDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OpeningDate
		{
			get
			{
				return this._OpeningDate;
			}
			set
			{
				if ((this._OpeningDate != value))
				{
					this.OnOpeningDateChanging(value);
					this.SendPropertyChanging();
					this._OpeningDate = value;
					this.SendPropertyChanged("OpeningDate");
					this.OnOpeningDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpeningBalance", DbType="Float")]
		public System.Nullable<double> OpeningBalance
		{
			get
			{
				return this._OpeningBalance;
			}
			set
			{
				if ((this._OpeningBalance != value))
				{
					this.OnOpeningBalanceChanging(value);
					this.SendPropertyChanging();
					this._OpeningBalance = value;
					this.SendPropertyChanged("OpeningBalance");
					this.OnOpeningBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(10)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this.OnDateOfEntryChanging(value);
					this.SendPropertyChanging();
					this._DateOfEntry = value;
					this.SendPropertyChanged("DateOfEntry");
					this.OnDateOfEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryBy", DbType="VarChar(10)")]
		public string EntryBy
		{
			get
			{
				return this._EntryBy;
			}
			set
			{
				if ((this._EntryBy != value))
				{
					this.OnEntryByChanging(value);
					this.SendPropertyChanging();
					this._EntryBy = value;
					this.SendPropertyChanged("EntryBy");
					this.OnEntryByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AllTransaction", Storage="_AllTransactions", ThisKey="AccountsId", OtherKey="AccountsId")]
		public EntitySet<AllTransaction> AllTransactions
		{
			get
			{
				return this._AllTransactions;
			}
			set
			{
				this._AllTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Budget", Storage="_Budgets", ThisKey="AccountsId", OtherKey="AccountsId")]
		public EntitySet<Budget> Budgets
		{
			get
			{
				return this._Budgets;
			}
			set
			{
				this._Budgets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_DailyLedger", Storage="_DailyLedgers", ThisKey="AccountsId", OtherKey="AccountsId")]
		public EntitySet<DailyLedger> DailyLedgers
		{
			get
			{
				return this._DailyLedgers;
			}
			set
			{
				this._DailyLedgers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_VoucherDetail", Storage="_VoucherDetails", ThisKey="AccountsId", OtherKey="AccountsId")]
		public EntitySet<VoucherDetail> VoucherDetails
		{
			get
			{
				return this._VoucherDetails;
			}
			set
			{
				this._VoucherDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Account", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(string);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ControlAccount_Account", Storage="_ControlAccount", ThisKey="ControlId", OtherKey="ControlId", IsForeignKey=true)]
		public ControlAccount ControlAccount
		{
			get
			{
				return this._ControlAccount.Entity;
			}
			set
			{
				ControlAccount previousValue = this._ControlAccount.Entity;
				if (((previousValue != value) 
							|| (this._ControlAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ControlAccount.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._ControlAccount.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._ControlId = value.ControlId;
					}
					else
					{
						this._ControlId = default(string);
					}
					this.SendPropertyChanged("ControlAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupAccount_Account", Storage="_GroupAccount", ThisKey="GroupId", OtherKey="GroupId", IsForeignKey=true)]
		public GroupAccount GroupAccount
		{
			get
			{
				return this._GroupAccount.Entity;
			}
			set
			{
				GroupAccount previousValue = this._GroupAccount.Entity;
				if (((previousValue != value) 
							|| (this._GroupAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupAccount.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._GroupAccount.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._GroupId = value.GroupId;
					}
					else
					{
						this._GroupId = default(string);
					}
					this.SendPropertyChanged("GroupAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubsidiaryAccount_Account", Storage="_SubsidiaryAccount", ThisKey="SubsidiaryId", OtherKey="SubsidiaryId", IsForeignKey=true)]
		public SubsidiaryAccount SubsidiaryAccount
		{
			get
			{
				return this._SubsidiaryAccount.Entity;
			}
			set
			{
				SubsidiaryAccount previousValue = this._SubsidiaryAccount.Entity;
				if (((previousValue != value) 
							|| (this._SubsidiaryAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubsidiaryAccount.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._SubsidiaryAccount.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._SubsidiaryId = value.SubsidiaryId;
					}
					else
					{
						this._SubsidiaryId = default(string);
					}
					this.SendPropertyChanged("SubsidiaryAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AllTransactions(AllTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AllTransactions(AllTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Budgets(Budget entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Budgets(Budget entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_DailyLedgers(DailyLedger entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_DailyLedgers(DailyLedger entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_VoucherDetails(VoucherDetail entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_VoucherDetails(VoucherDetail entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AllTransaction")]
	public partial class AllTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AllTransactionID;
		
		private string _VoucherNo;
		
		private System.Nullable<System.DateTime> _PostDate;
		
		private string _AccountsId;
		
		private System.Nullable<double> _Amount;
		
		private string _Type;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private string _EntryBy;
		
		private string _CompanyId;
		
		private string _LocationId;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Voucher> _Voucher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAllTransactionIDChanging(System.Guid value);
    partial void OnAllTransactionIDChanged();
    partial void OnVoucherNoChanging(string value);
    partial void OnVoucherNoChanged();
    partial void OnPostDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPostDateChanged();
    partial void OnAccountsIdChanging(string value);
    partial void OnAccountsIdChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnDateOfEntryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEntryChanged();
    partial void OnEntryByChanging(string value);
    partial void OnEntryByChanged();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    partial void OnLocationIdChanging(string value);
    partial void OnLocationIdChanged();
    #endregion
		
		public AllTransaction()
		{
			this._Account = default(EntityRef<Account>);
			this._Company = default(EntityRef<Company>);
			this._Location = default(EntityRef<Location>);
			this._Voucher = default(EntityRef<Voucher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllTransactionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AllTransactionID
		{
			get
			{
				return this._AllTransactionID;
			}
			set
			{
				if ((this._AllTransactionID != value))
				{
					this.OnAllTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._AllTransactionID = value;
					this.SendPropertyChanged("AllTransactionID");
					this.OnAllTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoucherNo", DbType="VarChar(30)")]
		public string VoucherNo
		{
			get
			{
				return this._VoucherNo;
			}
			set
			{
				if ((this._VoucherNo != value))
				{
					if (this._Voucher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoucherNoChanging(value);
					this.SendPropertyChanging();
					this._VoucherNo = value;
					this.SendPropertyChanged("VoucherNo");
					this.OnVoucherNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountsId", DbType="VarChar(20)")]
		public string AccountsId
		{
			get
			{
				return this._AccountsId;
			}
			set
			{
				if ((this._AccountsId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountsIdChanging(value);
					this.SendPropertyChanging();
					this._AccountsId = value;
					this.SendPropertyChanged("AccountsId");
					this.OnAccountsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(10)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this.OnDateOfEntryChanging(value);
					this.SendPropertyChanging();
					this._DateOfEntry = value;
					this.SendPropertyChanged("DateOfEntry");
					this.OnDateOfEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryBy", DbType="VarChar(10)")]
		public string EntryBy
		{
			get
			{
				return this._EntryBy;
			}
			set
			{
				if ((this._EntryBy != value))
				{
					this.OnEntryByChanging(value);
					this.SendPropertyChanging();
					this._EntryBy = value;
					this.SendPropertyChanged("EntryBy");
					this.OnEntryByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="VarChar(2)")]
		public string LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AllTransaction", Storage="_Account", ThisKey="AccountsId", OtherKey="AccountsId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AllTransactions.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AllTransactions.Add(this);
						this._AccountsId = value.AccountsId;
					}
					else
					{
						this._AccountsId = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_AllTransaction", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.AllTransactions.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.AllTransactions.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(string);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_AllTransaction", Storage="_Location", ThisKey="LocationId", OtherKey="LocationId", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.AllTransactions.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.AllTransactions.Add(this);
						this._LocationId = value.LocationId;
					}
					else
					{
						this._LocationId = default(string);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voucher_AllTransaction", Storage="_Voucher", ThisKey="VoucherNo", OtherKey="VoucherNo", IsForeignKey=true)]
		public Voucher Voucher
		{
			get
			{
				return this._Voucher.Entity;
			}
			set
			{
				Voucher previousValue = this._Voucher.Entity;
				if (((previousValue != value) 
							|| (this._Voucher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Voucher.Entity = null;
						previousValue.AllTransactions.Remove(this);
					}
					this._Voucher.Entity = value;
					if ((value != null))
					{
						value.AllTransactions.Add(this);
						this._VoucherNo = value.VoucherNo;
					}
					else
					{
						this._VoucherNo = default(string);
					}
					this.SendPropertyChanged("Voucher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Budget")]
	public partial class Budget : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AccountsId;
		
		private string _MonthYear;
		
		private System.Nullable<double> _Amount;
		
		private string _Remarks;
		
		private string _EntryBy;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private string _Approve;
		
		private System.Nullable<System.DateTime> _ApproveDate;
		
		private string _ApproveBy;
		
		private string _CompanyId;
		
		private string _ProjectID;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountsIdChanging(string value);
    partial void OnAccountsIdChanged();
    partial void OnMonthYearChanging(string value);
    partial void OnMonthYearChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnEntryByChanging(string value);
    partial void OnEntryByChanged();
    partial void OnDateOfEntryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEntryChanged();
    partial void OnApproveChanging(string value);
    partial void OnApproveChanged();
    partial void OnApproveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApproveDateChanged();
    partial void OnApproveByChanging(string value);
    partial void OnApproveByChanged();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    partial void OnProjectIDChanging(string value);
    partial void OnProjectIDChanged();
    #endregion
		
		public Budget()
		{
			this._Account = default(EntityRef<Account>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountsId", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AccountsId
		{
			get
			{
				return this._AccountsId;
			}
			set
			{
				if ((this._AccountsId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountsIdChanging(value);
					this.SendPropertyChanging();
					this._AccountsId = value;
					this.SendPropertyChanged("AccountsId");
					this.OnAccountsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthYear", DbType="VarChar(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MonthYear
		{
			get
			{
				return this._MonthYear;
			}
			set
			{
				if ((this._MonthYear != value))
				{
					this.OnMonthYearChanging(value);
					this.SendPropertyChanging();
					this._MonthYear = value;
					this.SendPropertyChanged("MonthYear");
					this.OnMonthYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="VarChar(200)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryBy", DbType="VarChar(10)")]
		public string EntryBy
		{
			get
			{
				return this._EntryBy;
			}
			set
			{
				if ((this._EntryBy != value))
				{
					this.OnEntryByChanging(value);
					this.SendPropertyChanging();
					this._EntryBy = value;
					this.SendPropertyChanged("EntryBy");
					this.OnEntryByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this.OnDateOfEntryChanging(value);
					this.SendPropertyChanging();
					this._DateOfEntry = value;
					this.SendPropertyChanged("DateOfEntry");
					this.OnDateOfEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approve", DbType="VarChar(1)")]
		public string Approve
		{
			get
			{
				return this._Approve;
			}
			set
			{
				if ((this._Approve != value))
				{
					this.OnApproveChanging(value);
					this.SendPropertyChanging();
					this._Approve = value;
					this.SendPropertyChanged("Approve");
					this.OnApproveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ApproveDate
		{
			get
			{
				return this._ApproveDate;
			}
			set
			{
				if ((this._ApproveDate != value))
				{
					this.OnApproveDateChanging(value);
					this.SendPropertyChanging();
					this._ApproveDate = value;
					this.SendPropertyChanged("ApproveDate");
					this.OnApproveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproveBy", DbType="VarChar(10)")]
		public string ApproveBy
		{
			get
			{
				return this._ApproveBy;
			}
			set
			{
				if ((this._ApproveBy != value))
				{
					this.OnApproveByChanging(value);
					this.SendPropertyChanging();
					this._ApproveBy = value;
					this.SendPropertyChanged("ApproveBy");
					this.OnApproveByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Budget", Storage="_Account", ThisKey="AccountsId", OtherKey="AccountsId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Budgets.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Budgets.Add(this);
						this._AccountsId = value.AccountsId;
					}
					else
					{
						this._AccountsId = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Budget", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Budgets.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Budgets.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(string);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CompanyId;
		
		private string _Name;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Email;
		
		private string _URL;
		
		private System.Nullable<System.DateTime> _OpeningDate;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private string _EntryBy;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<AllTransaction> _AllTransactions;
		
		private EntitySet<Budget> _Budgets;
		
		private EntitySet<ControlAccount> _ControlAccounts;
		
		private EntitySet<DailyLedger> _DailyLedgers;
		
		private EntitySet<Feature> _Features;
		
		private EntitySet<Location> _Locations;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<SecurityQuestion> _SecurityQuestions;
		
		private EntitySet<SubsidiaryAccount> _SubsidiaryAccounts;
		
		private EntitySet<UserLevel> _UserLevels;
		
		private EntitySet<User> _Users;
		
		private EntitySet<User> _Users1;
		
		private EntitySet<Voucher> _Vouchers;
		
		private EntitySet<IDNumber> _IDNumbers;
		
		private EntitySet<UserEntryExit> _UserEntryExits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnOpeningDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOpeningDateChanged();
    partial void OnDateOfEntryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEntryChanged();
    partial void OnEntryByChanging(string value);
    partial void OnEntryByChanged();
    #endregion
		
		public Company()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._AllTransactions = new EntitySet<AllTransaction>(new Action<AllTransaction>(this.attach_AllTransactions), new Action<AllTransaction>(this.detach_AllTransactions));
			this._Budgets = new EntitySet<Budget>(new Action<Budget>(this.attach_Budgets), new Action<Budget>(this.detach_Budgets));
			this._ControlAccounts = new EntitySet<ControlAccount>(new Action<ControlAccount>(this.attach_ControlAccounts), new Action<ControlAccount>(this.detach_ControlAccounts));
			this._DailyLedgers = new EntitySet<DailyLedger>(new Action<DailyLedger>(this.attach_DailyLedgers), new Action<DailyLedger>(this.detach_DailyLedgers));
			this._Features = new EntitySet<Feature>(new Action<Feature>(this.attach_Features), new Action<Feature>(this.detach_Features));
			this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._SecurityQuestions = new EntitySet<SecurityQuestion>(new Action<SecurityQuestion>(this.attach_SecurityQuestions), new Action<SecurityQuestion>(this.detach_SecurityQuestions));
			this._SubsidiaryAccounts = new EntitySet<SubsidiaryAccount>(new Action<SubsidiaryAccount>(this.attach_SubsidiaryAccounts), new Action<SubsidiaryAccount>(this.detach_SubsidiaryAccounts));
			this._UserLevels = new EntitySet<UserLevel>(new Action<UserLevel>(this.attach_UserLevels), new Action<UserLevel>(this.detach_UserLevels));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Users1 = new EntitySet<User>(new Action<User>(this.attach_Users1), new Action<User>(this.detach_Users1));
			this._Vouchers = new EntitySet<Voucher>(new Action<Voucher>(this.attach_Vouchers), new Action<Voucher>(this.detach_Vouchers));
			this._IDNumbers = new EntitySet<IDNumber>(new Action<IDNumber>(this.attach_IDNumbers), new Action<IDNumber>(this.detach_IDNumbers));
			this._UserEntryExits = new EntitySet<UserEntryExit>(new Action<UserEntryExit>(this.attach_UserEntryExits), new Action<UserEntryExit>(this.detach_UserEntryExits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="VarChar(50)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpeningDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OpeningDate
		{
			get
			{
				return this._OpeningDate;
			}
			set
			{
				if ((this._OpeningDate != value))
				{
					this.OnOpeningDateChanging(value);
					this.SendPropertyChanging();
					this._OpeningDate = value;
					this.SendPropertyChanged("OpeningDate");
					this.OnOpeningDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this.OnDateOfEntryChanging(value);
					this.SendPropertyChanging();
					this._DateOfEntry = value;
					this.SendPropertyChanged("DateOfEntry");
					this.OnDateOfEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryBy", DbType="VarChar(50)")]
		public string EntryBy
		{
			get
			{
				return this._EntryBy;
			}
			set
			{
				if ((this._EntryBy != value))
				{
					this.OnEntryByChanging(value);
					this.SendPropertyChanging();
					this._EntryBy = value;
					this.SendPropertyChanged("EntryBy");
					this.OnEntryByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Account", Storage="_Accounts", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_AllTransaction", Storage="_AllTransactions", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<AllTransaction> AllTransactions
		{
			get
			{
				return this._AllTransactions;
			}
			set
			{
				this._AllTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Budget", Storage="_Budgets", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<Budget> Budgets
		{
			get
			{
				return this._Budgets;
			}
			set
			{
				this._Budgets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_ControlAccount", Storage="_ControlAccounts", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<ControlAccount> ControlAccounts
		{
			get
			{
				return this._ControlAccounts;
			}
			set
			{
				this._ControlAccounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_DailyLedger", Storage="_DailyLedgers", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<DailyLedger> DailyLedgers
		{
			get
			{
				return this._DailyLedgers;
			}
			set
			{
				this._DailyLedgers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Feature", Storage="_Features", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<Feature> Features
		{
			get
			{
				return this._Features;
			}
			set
			{
				this._Features.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Location", Storage="_Locations", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<Location> Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				this._Locations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Project", Storage="_Projects", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_SecurityQuestion", Storage="_SecurityQuestions", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<SecurityQuestion> SecurityQuestions
		{
			get
			{
				return this._SecurityQuestions;
			}
			set
			{
				this._SecurityQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_SubsidiaryAccount", Storage="_SubsidiaryAccounts", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<SubsidiaryAccount> SubsidiaryAccounts
		{
			get
			{
				return this._SubsidiaryAccounts;
			}
			set
			{
				this._SubsidiaryAccounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_UserLevel", Storage="_UserLevels", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<UserLevel> UserLevels
		{
			get
			{
				return this._UserLevels;
			}
			set
			{
				this._UserLevels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_User", Storage="_Users", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_User1", Storage="_Users1", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<User> Users1
		{
			get
			{
				return this._Users1;
			}
			set
			{
				this._Users1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Voucher", Storage="_Vouchers", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<Voucher> Vouchers
		{
			get
			{
				return this._Vouchers;
			}
			set
			{
				this._Vouchers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_IDNumber", Storage="_IDNumbers", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<IDNumber> IDNumbers
		{
			get
			{
				return this._IDNumbers;
			}
			set
			{
				this._IDNumbers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_UserEntryExit", Storage="_UserEntryExits", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<UserEntryExit> UserEntryExits
		{
			get
			{
				return this._UserEntryExits;
			}
			set
			{
				this._UserEntryExits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_AllTransactions(AllTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_AllTransactions(AllTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Budgets(Budget entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Budgets(Budget entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_ControlAccounts(ControlAccount entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_ControlAccounts(ControlAccount entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_DailyLedgers(DailyLedger entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_DailyLedgers(DailyLedger entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Features(Feature entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Features(Feature entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_SecurityQuestions(SecurityQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_SecurityQuestions(SecurityQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_SubsidiaryAccounts(SubsidiaryAccount entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_SubsidiaryAccounts(SubsidiaryAccount entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_UserLevels(UserLevel entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_UserLevels(UserLevel entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Users1(User entity)
		{
			this.SendPropertyChanging();
			entity.Company1 = this;
		}
		
		private void detach_Users1(User entity)
		{
			this.SendPropertyChanging();
			entity.Company1 = null;
		}
		
		private void attach_Vouchers(Voucher entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Vouchers(Voucher entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_IDNumbers(IDNumber entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_IDNumbers(IDNumber entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_UserEntryExits(UserEntryExit entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_UserEntryExits(UserEntryExit entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ControlAccount")]
	public partial class ControlAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ControlId;
		
		private string _Name;
		
		private string _GroupId;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private string _EntryBy;
		
		private string _CompanyId;
		
		private string _Remarks;
		
		private EntitySet<Account> _Accounts;
		
		private EntityRef<ControlAccount> _ControlAccount2;
		
		private EntitySet<SubsidiaryAccount> _SubsidiaryAccounts;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<ControlAccount> _ControlAccount1;
		
		private EntityRef<GroupAccount> _GroupAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnControlIdChanging(string value);
    partial void OnControlIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGroupIdChanging(string value);
    partial void OnGroupIdChanged();
    partial void OnDateOfEntryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEntryChanged();
    partial void OnEntryByChanging(string value);
    partial void OnEntryByChanged();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    #endregion
		
		public ControlAccount()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._ControlAccount2 = default(EntityRef<ControlAccount>);
			this._SubsidiaryAccounts = new EntitySet<SubsidiaryAccount>(new Action<SubsidiaryAccount>(this.attach_SubsidiaryAccounts), new Action<SubsidiaryAccount>(this.detach_SubsidiaryAccounts));
			this._Company = default(EntityRef<Company>);
			this._ControlAccount1 = default(EntityRef<ControlAccount>);
			this._GroupAccount = default(EntityRef<GroupAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlId", DbType="VarChar(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ControlId
		{
			get
			{
				return this._ControlId;
			}
			set
			{
				if ((this._ControlId != value))
				{
					if (this._ControlAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnControlIdChanging(value);
					this.SendPropertyChanging();
					this._ControlId = value;
					this.SendPropertyChanged("ControlId");
					this.OnControlIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="VarChar(2)")]
		public string GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._GroupAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this.OnDateOfEntryChanging(value);
					this.SendPropertyChanging();
					this._DateOfEntry = value;
					this.SendPropertyChanged("DateOfEntry");
					this.OnDateOfEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryBy", DbType="VarChar(10)")]
		public string EntryBy
		{
			get
			{
				return this._EntryBy;
			}
			set
			{
				if ((this._EntryBy != value))
				{
					this.OnEntryByChanging(value);
					this.SendPropertyChanging();
					this._EntryBy = value;
					this.SendPropertyChanged("EntryBy");
					this.OnEntryByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="VarChar(50)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ControlAccount_Account", Storage="_Accounts", ThisKey="ControlId", OtherKey="ControlId")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ControlAccount_ControlAccount", Storage="_ControlAccount2", ThisKey="ControlId", OtherKey="ControlId", IsUnique=true, IsForeignKey=false)]
		public ControlAccount ControlAccount2
		{
			get
			{
				return this._ControlAccount2.Entity;
			}
			set
			{
				ControlAccount previousValue = this._ControlAccount2.Entity;
				if (((previousValue != value) 
							|| (this._ControlAccount2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ControlAccount2.Entity = null;
						previousValue.ControlAccount1 = null;
					}
					this._ControlAccount2.Entity = value;
					if ((value != null))
					{
						value.ControlAccount1 = this;
					}
					this.SendPropertyChanged("ControlAccount2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ControlAccount_SubsidiaryAccount", Storage="_SubsidiaryAccounts", ThisKey="ControlId", OtherKey="ControlId")]
		public EntitySet<SubsidiaryAccount> SubsidiaryAccounts
		{
			get
			{
				return this._SubsidiaryAccounts;
			}
			set
			{
				this._SubsidiaryAccounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_ControlAccount", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.ControlAccounts.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.ControlAccounts.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(string);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ControlAccount_ControlAccount", Storage="_ControlAccount1", ThisKey="ControlId", OtherKey="ControlId", IsForeignKey=true)]
		public ControlAccount ControlAccount1
		{
			get
			{
				return this._ControlAccount1.Entity;
			}
			set
			{
				ControlAccount previousValue = this._ControlAccount1.Entity;
				if (((previousValue != value) 
							|| (this._ControlAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ControlAccount1.Entity = null;
						previousValue.ControlAccount2 = null;
					}
					this._ControlAccount1.Entity = value;
					if ((value != null))
					{
						value.ControlAccount2 = this;
						this._ControlId = value.ControlId;
					}
					else
					{
						this._ControlId = default(string);
					}
					this.SendPropertyChanged("ControlAccount1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupAccount_ControlAccount", Storage="_GroupAccount", ThisKey="GroupId", OtherKey="GroupId", IsForeignKey=true)]
		public GroupAccount GroupAccount
		{
			get
			{
				return this._GroupAccount.Entity;
			}
			set
			{
				GroupAccount previousValue = this._GroupAccount.Entity;
				if (((previousValue != value) 
							|| (this._GroupAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupAccount.Entity = null;
						previousValue.ControlAccounts.Remove(this);
					}
					this._GroupAccount.Entity = value;
					if ((value != null))
					{
						value.ControlAccounts.Add(this);
						this._GroupId = value.GroupId;
					}
					else
					{
						this._GroupId = default(string);
					}
					this.SendPropertyChanged("GroupAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.ControlAccount = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.ControlAccount = null;
		}
		
		private void attach_SubsidiaryAccounts(SubsidiaryAccount entity)
		{
			this.SendPropertyChanging();
			entity.ControlAccount = this;
		}
		
		private void detach_SubsidiaryAccounts(SubsidiaryAccount entity)
		{
			this.SendPropertyChanging();
			entity.ControlAccount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ControlSecurity")]
	public partial class ControlSecurity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ControlId;
		
		private string _ParentName;
		
		private string _Name;
		
		private string _Caption;
		
		private string _ControlType;
		
		private EntitySet<ControlSecurityAssign> _ControlSecurityAssigns;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnControlIdChanging(string value);
    partial void OnControlIdChanged();
    partial void OnParentNameChanging(string value);
    partial void OnParentNameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCaptionChanging(string value);
    partial void OnCaptionChanged();
    partial void OnControlTypeChanging(string value);
    partial void OnControlTypeChanged();
    #endregion
		
		public ControlSecurity()
		{
			this._ControlSecurityAssigns = new EntitySet<ControlSecurityAssign>(new Action<ControlSecurityAssign>(this.attach_ControlSecurityAssigns), new Action<ControlSecurityAssign>(this.detach_ControlSecurityAssigns));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlId", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ControlId
		{
			get
			{
				return this._ControlId;
			}
			set
			{
				if ((this._ControlId != value))
				{
					this.OnControlIdChanging(value);
					this.SendPropertyChanging();
					this._ControlId = value;
					this.SendPropertyChanged("ControlId");
					this.OnControlIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ParentName
		{
			get
			{
				return this._ParentName;
			}
			set
			{
				if ((this._ParentName != value))
				{
					this.OnParentNameChanging(value);
					this.SendPropertyChanging();
					this._ParentName = value;
					this.SendPropertyChanged("ParentName");
					this.OnParentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Caption", DbType="VarChar(100)")]
		public string Caption
		{
			get
			{
				return this._Caption;
			}
			set
			{
				if ((this._Caption != value))
				{
					this.OnCaptionChanging(value);
					this.SendPropertyChanging();
					this._Caption = value;
					this.SendPropertyChanged("Caption");
					this.OnCaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlType", DbType="VarChar(10)")]
		public string ControlType
		{
			get
			{
				return this._ControlType;
			}
			set
			{
				if ((this._ControlType != value))
				{
					this.OnControlTypeChanging(value);
					this.SendPropertyChanging();
					this._ControlType = value;
					this.SendPropertyChanged("ControlType");
					this.OnControlTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ControlSecurity_ControlSecurityAssign", Storage="_ControlSecurityAssigns", ThisKey="ControlId", OtherKey="ControlId")]
		public EntitySet<ControlSecurityAssign> ControlSecurityAssigns
		{
			get
			{
				return this._ControlSecurityAssigns;
			}
			set
			{
				this._ControlSecurityAssigns.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ControlSecurityAssigns(ControlSecurityAssign entity)
		{
			this.SendPropertyChanging();
			entity.ControlSecurity = this;
		}
		
		private void detach_ControlSecurityAssigns(ControlSecurityAssign entity)
		{
			this.SendPropertyChanging();
			entity.ControlSecurity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ControlSecurityAssign")]
	public partial class ControlSecurityAssign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ControlAssignId;
		
		private string _UserName;
		
		private string _ControlId;
		
		private System.Nullable<bool> _ControlStatus;
		
		private string _ControlType;
		
		private EntityRef<ControlSecurity> _ControlSecurity;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnControlAssignIdChanging(string value);
    partial void OnControlAssignIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnControlIdChanging(string value);
    partial void OnControlIdChanged();
    partial void OnControlStatusChanging(System.Nullable<bool> value);
    partial void OnControlStatusChanged();
    partial void OnControlTypeChanging(string value);
    partial void OnControlTypeChanged();
    #endregion
		
		public ControlSecurityAssign()
		{
			this._ControlSecurity = default(EntityRef<ControlSecurity>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlAssignId", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ControlAssignId
		{
			get
			{
				return this._ControlAssignId;
			}
			set
			{
				if ((this._ControlAssignId != value))
				{
					this.OnControlAssignIdChanging(value);
					this.SendPropertyChanging();
					this._ControlAssignId = value;
					this.SendPropertyChanged("ControlAssignId");
					this.OnControlAssignIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlId", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string ControlId
		{
			get
			{
				return this._ControlId;
			}
			set
			{
				if ((this._ControlId != value))
				{
					if (this._ControlSecurity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnControlIdChanging(value);
					this.SendPropertyChanging();
					this._ControlId = value;
					this.SendPropertyChanged("ControlId");
					this.OnControlIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlStatus", DbType="Bit")]
		public System.Nullable<bool> ControlStatus
		{
			get
			{
				return this._ControlStatus;
			}
			set
			{
				if ((this._ControlStatus != value))
				{
					this.OnControlStatusChanging(value);
					this.SendPropertyChanging();
					this._ControlStatus = value;
					this.SendPropertyChanged("ControlStatus");
					this.OnControlStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlType", DbType="VarChar(10)")]
		public string ControlType
		{
			get
			{
				return this._ControlType;
			}
			set
			{
				if ((this._ControlType != value))
				{
					this.OnControlTypeChanging(value);
					this.SendPropertyChanging();
					this._ControlType = value;
					this.SendPropertyChanged("ControlType");
					this.OnControlTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ControlSecurity_ControlSecurityAssign", Storage="_ControlSecurity", ThisKey="ControlId", OtherKey="ControlId", IsForeignKey=true)]
		public ControlSecurity ControlSecurity
		{
			get
			{
				return this._ControlSecurity.Entity;
			}
			set
			{
				ControlSecurity previousValue = this._ControlSecurity.Entity;
				if (((previousValue != value) 
							|| (this._ControlSecurity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ControlSecurity.Entity = null;
						previousValue.ControlSecurityAssigns.Remove(this);
					}
					this._ControlSecurity.Entity = value;
					if ((value != null))
					{
						value.ControlSecurityAssigns.Add(this);
						this._ControlId = value.ControlId;
					}
					else
					{
						this._ControlId = default(string);
					}
					this.SendPropertyChanged("ControlSecurity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ControlSecurityAssign", Storage="_User", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ControlSecurityAssigns.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ControlSecurityAssigns.Add(this);
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DailyLedger")]
	public partial class DailyLedger : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DailyLedgerID;
		
		private System.DateTime _BalanceDate;
		
		private string _AccountsId;
		
		private System.Nullable<double> _Amount;
		
		private string _Type;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private string _EntryBy;
		
		private string _CompanyId;
		
		private string _ProjectID;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDailyLedgerIDChanging(System.Guid value);
    partial void OnDailyLedgerIDChanged();
    partial void OnBalanceDateChanging(System.DateTime value);
    partial void OnBalanceDateChanged();
    partial void OnAccountsIdChanging(string value);
    partial void OnAccountsIdChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnDateOfEntryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEntryChanged();
    partial void OnEntryByChanging(string value);
    partial void OnEntryByChanged();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    partial void OnProjectIDChanging(string value);
    partial void OnProjectIDChanged();
    #endregion
		
		public DailyLedger()
		{
			this._Account = default(EntityRef<Account>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DailyLedgerID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DailyLedgerID
		{
			get
			{
				return this._DailyLedgerID;
			}
			set
			{
				if ((this._DailyLedgerID != value))
				{
					this.OnDailyLedgerIDChanging(value);
					this.SendPropertyChanging();
					this._DailyLedgerID = value;
					this.SendPropertyChanged("DailyLedgerID");
					this.OnDailyLedgerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BalanceDate", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime BalanceDate
		{
			get
			{
				return this._BalanceDate;
			}
			set
			{
				if ((this._BalanceDate != value))
				{
					this.OnBalanceDateChanging(value);
					this.SendPropertyChanging();
					this._BalanceDate = value;
					this.SendPropertyChanged("BalanceDate");
					this.OnBalanceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountsId", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AccountsId
		{
			get
			{
				return this._AccountsId;
			}
			set
			{
				if ((this._AccountsId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountsIdChanging(value);
					this.SendPropertyChanging();
					this._AccountsId = value;
					this.SendPropertyChanged("AccountsId");
					this.OnAccountsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(10)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this.OnDateOfEntryChanging(value);
					this.SendPropertyChanging();
					this._DateOfEntry = value;
					this.SendPropertyChanged("DateOfEntry");
					this.OnDateOfEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryBy", DbType="VarChar(10)")]
		public string EntryBy
		{
			get
			{
				return this._EntryBy;
			}
			set
			{
				if ((this._EntryBy != value))
				{
					this.OnEntryByChanging(value);
					this.SendPropertyChanging();
					this._EntryBy = value;
					this.SendPropertyChanged("EntryBy");
					this.OnEntryByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="VarChar(3)")]
		public string ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_DailyLedger", Storage="_Account", ThisKey="AccountsId", OtherKey="AccountsId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.DailyLedgers.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.DailyLedgers.Add(this);
						this._AccountsId = value.AccountsId;
					}
					else
					{
						this._AccountsId = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_DailyLedger", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.DailyLedgers.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.DailyLedgers.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(string);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Feature")]
	public partial class Feature : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FeatureId;
		
		private string _Name;
		
		private string _Description;
		
		private string _FeatureTypeId;
		
		private string _DefaultValue;
		
		private string _Value;
		
		private string _CompanyId;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<FeatureType> _FeatureType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeatureIdChanging(string value);
    partial void OnFeatureIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFeatureTypeIdChanging(string value);
    partial void OnFeatureTypeIdChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    partial void OnDateOfEntryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEntryChanged();
    #endregion
		
		public Feature()
		{
			this._Company = default(EntityRef<Company>);
			this._FeatureType = default(EntityRef<FeatureType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeatureId", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FeatureId
		{
			get
			{
				return this._FeatureId;
			}
			set
			{
				if ((this._FeatureId != value))
				{
					this.OnFeatureIdChanging(value);
					this.SendPropertyChanging();
					this._FeatureId = value;
					this.SendPropertyChanged("FeatureId");
					this.OnFeatureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeatureTypeId", DbType="VarChar(3)")]
		public string FeatureTypeId
		{
			get
			{
				return this._FeatureTypeId;
			}
			set
			{
				if ((this._FeatureTypeId != value))
				{
					if (this._FeatureType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeatureTypeIdChanging(value);
					this.SendPropertyChanging();
					this._FeatureTypeId = value;
					this.SendPropertyChanged("FeatureTypeId");
					this.OnFeatureTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="VarChar(100)")]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(100)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this.OnDateOfEntryChanging(value);
					this.SendPropertyChanging();
					this._DateOfEntry = value;
					this.SendPropertyChanged("DateOfEntry");
					this.OnDateOfEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Feature", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Features.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Features.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(string);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeatureType_Feature", Storage="_FeatureType", ThisKey="FeatureTypeId", OtherKey="FeatureTypeId", IsForeignKey=true)]
		public FeatureType FeatureType
		{
			get
			{
				return this._FeatureType.Entity;
			}
			set
			{
				FeatureType previousValue = this._FeatureType.Entity;
				if (((previousValue != value) 
							|| (this._FeatureType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FeatureType.Entity = null;
						previousValue.Features.Remove(this);
					}
					this._FeatureType.Entity = value;
					if ((value != null))
					{
						value.Features.Add(this);
						this._FeatureTypeId = value.FeatureTypeId;
					}
					else
					{
						this._FeatureTypeId = default(string);
					}
					this.SendPropertyChanged("FeatureType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FeatureType")]
	public partial class FeatureType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FeatureTypeId;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private EntitySet<Feature> _Features;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeatureTypeIdChanging(string value);
    partial void OnFeatureTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateOfEntryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEntryChanged();
    #endregion
		
		public FeatureType()
		{
			this._Features = new EntitySet<Feature>(new Action<Feature>(this.attach_Features), new Action<Feature>(this.detach_Features));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeatureTypeId", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FeatureTypeId
		{
			get
			{
				return this._FeatureTypeId;
			}
			set
			{
				if ((this._FeatureTypeId != value))
				{
					this.OnFeatureTypeIdChanging(value);
					this.SendPropertyChanging();
					this._FeatureTypeId = value;
					this.SendPropertyChanged("FeatureTypeId");
					this.OnFeatureTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this.OnDateOfEntryChanging(value);
					this.SendPropertyChanging();
					this._DateOfEntry = value;
					this.SendPropertyChanged("DateOfEntry");
					this.OnDateOfEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeatureType_Feature", Storage="_Features", ThisKey="FeatureTypeId", OtherKey="FeatureTypeId")]
		public EntitySet<Feature> Features
		{
			get
			{
				return this._Features;
			}
			set
			{
				this._Features.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Features(Feature entity)
		{
			this.SendPropertyChanging();
			entity.FeatureType = this;
		}
		
		private void detach_Features(Feature entity)
		{
			this.SendPropertyChanging();
			entity.FeatureType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupAccount")]
	public partial class GroupAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _GroupId;
		
		private string _Name;
		
		private string _BalanceType;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<ControlAccount> _ControlAccounts;
		
		private EntitySet<SubsidiaryAccount> _SubsidiaryAccounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIdChanging(string value);
    partial void OnGroupIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBalanceTypeChanging(string value);
    partial void OnBalanceTypeChanged();
    #endregion
		
		public GroupAccount()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._ControlAccounts = new EntitySet<ControlAccount>(new Action<ControlAccount>(this.attach_ControlAccounts), new Action<ControlAccount>(this.detach_ControlAccounts));
			this._SubsidiaryAccounts = new EntitySet<SubsidiaryAccount>(new Action<SubsidiaryAccount>(this.attach_SubsidiaryAccounts), new Action<SubsidiaryAccount>(this.detach_SubsidiaryAccounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BalanceType", DbType="VarChar(10)")]
		public string BalanceType
		{
			get
			{
				return this._BalanceType;
			}
			set
			{
				if ((this._BalanceType != value))
				{
					this.OnBalanceTypeChanging(value);
					this.SendPropertyChanging();
					this._BalanceType = value;
					this.SendPropertyChanged("BalanceType");
					this.OnBalanceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupAccount_Account", Storage="_Accounts", ThisKey="GroupId", OtherKey="GroupId")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupAccount_ControlAccount", Storage="_ControlAccounts", ThisKey="GroupId", OtherKey="GroupId")]
		public EntitySet<ControlAccount> ControlAccounts
		{
			get
			{
				return this._ControlAccounts;
			}
			set
			{
				this._ControlAccounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupAccount_SubsidiaryAccount", Storage="_SubsidiaryAccounts", ThisKey="GroupId", OtherKey="GroupId")]
		public EntitySet<SubsidiaryAccount> SubsidiaryAccounts
		{
			get
			{
				return this._SubsidiaryAccounts;
			}
			set
			{
				this._SubsidiaryAccounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.GroupAccount = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.GroupAccount = null;
		}
		
		private void attach_ControlAccounts(ControlAccount entity)
		{
			this.SendPropertyChanging();
			entity.GroupAccount = this;
		}
		
		private void detach_ControlAccounts(ControlAccount entity)
		{
			this.SendPropertyChanging();
			entity.GroupAccount = null;
		}
		
		private void attach_SubsidiaryAccounts(SubsidiaryAccount entity)
		{
			this.SendPropertyChanging();
			entity.GroupAccount = this;
		}
		
		private void detach_SubsidiaryAccounts(SubsidiaryAccount entity)
		{
			this.SendPropertyChanging();
			entity.GroupAccount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hacker")]
	public partial class Hacker
	{
		
		private string _HackerName;
		
		private string _TerminalName;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private string _CompanyId;
		
		public Hacker()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HackerName", DbType="VarChar(50)")]
		public string HackerName
		{
			get
			{
				return this._HackerName;
			}
			set
			{
				if ((this._HackerName != value))
				{
					this._HackerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TerminalName", DbType="VarChar(50)")]
		public string TerminalName
		{
			get
			{
				return this._TerminalName;
			}
			set
			{
				if ((this._TerminalName != value))
				{
					this._TerminalName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this._DateOfEntry = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this._CompanyId = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IDType")]
	public partial class IDType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDTypeId;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<IDNumber> _IDNumbers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDTypeIdChanging(string value);
    partial void OnIDTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public IDType()
		{
			this._IDNumbers = new EntitySet<IDNumber>(new Action<IDNumber>(this.attach_IDNumbers), new Action<IDNumber>(this.detach_IDNumbers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTypeId", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDTypeId
		{
			get
			{
				return this._IDTypeId;
			}
			set
			{
				if ((this._IDTypeId != value))
				{
					this.OnIDTypeIdChanging(value);
					this.SendPropertyChanging();
					this._IDTypeId = value;
					this.SendPropertyChanged("IDTypeId");
					this.OnIDTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IDType_IDNumber", Storage="_IDNumbers", ThisKey="IDTypeId", OtherKey="IDTypeId")]
		public EntitySet<IDNumber> IDNumbers
		{
			get
			{
				return this._IDNumbers;
			}
			set
			{
				this._IDNumbers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IDNumbers(IDNumber entity)
		{
			this.SendPropertyChanging();
			entity.IDType = this;
		}
		
		private void detach_IDNumbers(IDNumber entity)
		{
			this.SendPropertyChanging();
			entity.IDType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LocationId;
		
		private string _Name;
		
		private string _CompanyId;
		
		private string _EntryBy;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private EntitySet<AllTransaction> _AllTransactions;
		
		private EntitySet<Voucher> _Vouchers;
		
		private EntitySet<IDNumber> _IDNumbers;
		
		private EntitySet<UserEntryExit> _UserEntryExits;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIdChanging(string value);
    partial void OnLocationIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    partial void OnEntryByChanging(string value);
    partial void OnEntryByChanged();
    partial void OnDateOfEntryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEntryChanged();
    #endregion
		
		public Location()
		{
			this._AllTransactions = new EntitySet<AllTransaction>(new Action<AllTransaction>(this.attach_AllTransactions), new Action<AllTransaction>(this.detach_AllTransactions));
			this._Vouchers = new EntitySet<Voucher>(new Action<Voucher>(this.attach_Vouchers), new Action<Voucher>(this.detach_Vouchers));
			this._IDNumbers = new EntitySet<IDNumber>(new Action<IDNumber>(this.attach_IDNumbers), new Action<IDNumber>(this.detach_IDNumbers));
			this._UserEntryExits = new EntitySet<UserEntryExit>(new Action<UserEntryExit>(this.attach_UserEntryExits), new Action<UserEntryExit>(this.detach_UserEntryExits));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryBy", DbType="VarChar(10)")]
		public string EntryBy
		{
			get
			{
				return this._EntryBy;
			}
			set
			{
				if ((this._EntryBy != value))
				{
					this.OnEntryByChanging(value);
					this.SendPropertyChanging();
					this._EntryBy = value;
					this.SendPropertyChanged("EntryBy");
					this.OnEntryByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this.OnDateOfEntryChanging(value);
					this.SendPropertyChanging();
					this._DateOfEntry = value;
					this.SendPropertyChanged("DateOfEntry");
					this.OnDateOfEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_AllTransaction", Storage="_AllTransactions", ThisKey="LocationId", OtherKey="LocationId")]
		public EntitySet<AllTransaction> AllTransactions
		{
			get
			{
				return this._AllTransactions;
			}
			set
			{
				this._AllTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Voucher", Storage="_Vouchers", ThisKey="LocationId", OtherKey="LocationId")]
		public EntitySet<Voucher> Vouchers
		{
			get
			{
				return this._Vouchers;
			}
			set
			{
				this._Vouchers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_IDNumber", Storage="_IDNumbers", ThisKey="LocationId", OtherKey="LocationId")]
		public EntitySet<IDNumber> IDNumbers
		{
			get
			{
				return this._IDNumbers;
			}
			set
			{
				this._IDNumbers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_UserEntryExit", Storage="_UserEntryExits", ThisKey="LocationId", OtherKey="LocationId")]
		public EntitySet<UserEntryExit> UserEntryExits
		{
			get
			{
				return this._UserEntryExits;
			}
			set
			{
				this._UserEntryExits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Location", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Locations.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Locations.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(string);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AllTransactions(AllTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_AllTransactions(AllTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_Vouchers(Voucher entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Vouchers(Voucher entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_IDNumbers(IDNumber entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_IDNumbers(IDNumber entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_UserEntryExits(UserEntryExit entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_UserEntryExits(UserEntryExit entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MenuSecurity")]
	public partial class MenuSecurity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MenuId;
		
		private string _FormName;
		
		private string _FormCaption;
		
		private string _Name;
		
		private string _Caption;
		
		private EntitySet<MenuSecurityAssign> _MenuSecurityAssigns;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuIdChanging(string value);
    partial void OnMenuIdChanged();
    partial void OnFormNameChanging(string value);
    partial void OnFormNameChanged();
    partial void OnFormCaptionChanging(string value);
    partial void OnFormCaptionChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCaptionChanging(string value);
    partial void OnCaptionChanged();
    #endregion
		
		public MenuSecurity()
		{
			this._MenuSecurityAssigns = new EntitySet<MenuSecurityAssign>(new Action<MenuSecurityAssign>(this.attach_MenuSecurityAssigns), new Action<MenuSecurityAssign>(this.detach_MenuSecurityAssigns));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuId", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MenuId
		{
			get
			{
				return this._MenuId;
			}
			set
			{
				if ((this._MenuId != value))
				{
					this.OnMenuIdChanging(value);
					this.SendPropertyChanging();
					this._MenuId = value;
					this.SendPropertyChanged("MenuId");
					this.OnMenuIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormName", DbType="VarChar(100)")]
		public string FormName
		{
			get
			{
				return this._FormName;
			}
			set
			{
				if ((this._FormName != value))
				{
					this.OnFormNameChanging(value);
					this.SendPropertyChanging();
					this._FormName = value;
					this.SendPropertyChanged("FormName");
					this.OnFormNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormCaption", DbType="VarChar(100)")]
		public string FormCaption
		{
			get
			{
				return this._FormCaption;
			}
			set
			{
				if ((this._FormCaption != value))
				{
					this.OnFormCaptionChanging(value);
					this.SendPropertyChanging();
					this._FormCaption = value;
					this.SendPropertyChanged("FormCaption");
					this.OnFormCaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Caption", DbType="VarChar(100)")]
		public string Caption
		{
			get
			{
				return this._Caption;
			}
			set
			{
				if ((this._Caption != value))
				{
					this.OnCaptionChanging(value);
					this.SendPropertyChanging();
					this._Caption = value;
					this.SendPropertyChanged("Caption");
					this.OnCaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MenuSecurity_MenuSecurityAssign", Storage="_MenuSecurityAssigns", ThisKey="MenuId", OtherKey="MenuId")]
		public EntitySet<MenuSecurityAssign> MenuSecurityAssigns
		{
			get
			{
				return this._MenuSecurityAssigns;
			}
			set
			{
				this._MenuSecurityAssigns.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MenuSecurityAssigns(MenuSecurityAssign entity)
		{
			this.SendPropertyChanging();
			entity.MenuSecurity = this;
		}
		
		private void detach_MenuSecurityAssigns(MenuSecurityAssign entity)
		{
			this.SendPropertyChanging();
			entity.MenuSecurity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MenuSecurityAssign")]
	public partial class MenuSecurityAssign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MenuAssignId;
		
		private string _UserName;
		
		private string _MenuId;
		
		private System.Nullable<bool> _MenuStatus;
		
		private EntityRef<MenuSecurity> _MenuSecurity;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuAssignIdChanging(string value);
    partial void OnMenuAssignIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnMenuIdChanging(string value);
    partial void OnMenuIdChanged();
    partial void OnMenuStatusChanging(System.Nullable<bool> value);
    partial void OnMenuStatusChanged();
    #endregion
		
		public MenuSecurityAssign()
		{
			this._MenuSecurity = default(EntityRef<MenuSecurity>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuAssignId", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MenuAssignId
		{
			get
			{
				return this._MenuAssignId;
			}
			set
			{
				if ((this._MenuAssignId != value))
				{
					this.OnMenuAssignIdChanging(value);
					this.SendPropertyChanging();
					this._MenuAssignId = value;
					this.SendPropertyChanged("MenuAssignId");
					this.OnMenuAssignIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuId", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string MenuId
		{
			get
			{
				return this._MenuId;
			}
			set
			{
				if ((this._MenuId != value))
				{
					if (this._MenuSecurity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMenuIdChanging(value);
					this.SendPropertyChanging();
					this._MenuId = value;
					this.SendPropertyChanged("MenuId");
					this.OnMenuIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuStatus", DbType="Bit")]
		public System.Nullable<bool> MenuStatus
		{
			get
			{
				return this._MenuStatus;
			}
			set
			{
				if ((this._MenuStatus != value))
				{
					this.OnMenuStatusChanging(value);
					this.SendPropertyChanging();
					this._MenuStatus = value;
					this.SendPropertyChanged("MenuStatus");
					this.OnMenuStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MenuSecurity_MenuSecurityAssign", Storage="_MenuSecurity", ThisKey="MenuId", OtherKey="MenuId", IsForeignKey=true)]
		public MenuSecurity MenuSecurity
		{
			get
			{
				return this._MenuSecurity.Entity;
			}
			set
			{
				MenuSecurity previousValue = this._MenuSecurity.Entity;
				if (((previousValue != value) 
							|| (this._MenuSecurity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MenuSecurity.Entity = null;
						previousValue.MenuSecurityAssigns.Remove(this);
					}
					this._MenuSecurity.Entity = value;
					if ((value != null))
					{
						value.MenuSecurityAssigns.Add(this);
						this._MenuId = value.MenuId;
					}
					else
					{
						this._MenuId = default(string);
					}
					this.SendPropertyChanged("MenuSecurity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MenuSecurityAssign", Storage="_User", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MenuSecurityAssigns.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MenuSecurityAssigns.Add(this);
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ProjectId;
		
		private string _Name;
		
		private string _Description;
		
		private string _CompanyId;
		
		private string _EntryBy;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private EntitySet<Voucher> _Vouchers;
		
		private EntitySet<YearEndClosing> _YearEndClosings;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIdChanging(string value);
    partial void OnProjectIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    partial void OnEntryByChanging(string value);
    partial void OnEntryByChanged();
    partial void OnDateOfEntryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEntryChanged();
    #endregion
		
		public Project()
		{
			this._Vouchers = new EntitySet<Voucher>(new Action<Voucher>(this.attach_Vouchers), new Action<Voucher>(this.detach_Vouchers));
			this._YearEndClosings = new EntitySet<YearEndClosing>(new Action<YearEndClosing>(this.attach_YearEndClosings), new Action<YearEndClosing>(this.detach_YearEndClosings));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryBy", DbType="VarChar(10)")]
		public string EntryBy
		{
			get
			{
				return this._EntryBy;
			}
			set
			{
				if ((this._EntryBy != value))
				{
					this.OnEntryByChanging(value);
					this.SendPropertyChanging();
					this._EntryBy = value;
					this.SendPropertyChanged("EntryBy");
					this.OnEntryByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this.OnDateOfEntryChanging(value);
					this.SendPropertyChanging();
					this._DateOfEntry = value;
					this.SendPropertyChanged("DateOfEntry");
					this.OnDateOfEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Voucher", Storage="_Vouchers", ThisKey="ProjectId", OtherKey="ProjectId")]
		public EntitySet<Voucher> Vouchers
		{
			get
			{
				return this._Vouchers;
			}
			set
			{
				this._Vouchers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_YearEndClosing", Storage="_YearEndClosings", ThisKey="ProjectId", OtherKey="ProjectId")]
		public EntitySet<YearEndClosing> YearEndClosings
		{
			get
			{
				return this._YearEndClosings;
			}
			set
			{
				this._YearEndClosings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Project", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(string);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vouchers(Voucher entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Vouchers(Voucher entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_YearEndClosings(YearEndClosing entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_YearEndClosings(YearEndClosing entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurityQuestion")]
	public partial class SecurityQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SecurityQuestionId;
		
		private string _Name;
		
		private string _CompanyId;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private string _EntryBy;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSecurityQuestionIdChanging(string value);
    partial void OnSecurityQuestionIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    partial void OnDateOfEntryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEntryChanged();
    partial void OnEntryByChanging(string value);
    partial void OnEntryByChanged();
    #endregion
		
		public SecurityQuestion()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityQuestionId", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SecurityQuestionId
		{
			get
			{
				return this._SecurityQuestionId;
			}
			set
			{
				if ((this._SecurityQuestionId != value))
				{
					this.OnSecurityQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._SecurityQuestionId = value;
					this.SendPropertyChanged("SecurityQuestionId");
					this.OnSecurityQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this.OnDateOfEntryChanging(value);
					this.SendPropertyChanging();
					this._DateOfEntry = value;
					this.SendPropertyChanged("DateOfEntry");
					this.OnDateOfEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryBy", DbType="VarChar(50)")]
		public string EntryBy
		{
			get
			{
				return this._EntryBy;
			}
			set
			{
				if ((this._EntryBy != value))
				{
					this.OnEntryByChanging(value);
					this.SendPropertyChanging();
					this._EntryBy = value;
					this.SendPropertyChanged("EntryBy");
					this.OnEntryByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_SecurityQuestion", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.SecurityQuestions.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.SecurityQuestions.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(string);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurityQuestionAnswer")]
	public partial class SecurityQuestionAnswer
	{
		
		private string _UserName;
		
		private string _SecurityQuestionId;
		
		private string _Answer;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private string _EntryBy;
		
		private string _CompanyId;
		
		public SecurityQuestionAnswer()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(10)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityQuestionId", DbType="VarChar(3)")]
		public string SecurityQuestionId
		{
			get
			{
				return this._SecurityQuestionId;
			}
			set
			{
				if ((this._SecurityQuestionId != value))
				{
					this._SecurityQuestionId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="VarChar(100)")]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this._Answer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this._DateOfEntry = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryBy", DbType="VarChar(10)")]
		public string EntryBy
		{
			get
			{
				return this._EntryBy;
			}
			set
			{
				if ((this._EntryBy != value))
				{
					this._EntryBy = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this._CompanyId = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubsidiaryAccounts")]
	public partial class SubsidiaryAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _GroupId;
		
		private string _ControlId;
		
		private string _SubsidiaryId;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private string _CompanyId;
		
		private string _EntryBy;
		
		private EntitySet<Account> _Accounts;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<ControlAccount> _ControlAccount;
		
		private EntityRef<GroupAccount> _GroupAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIdChanging(string value);
    partial void OnGroupIdChanged();
    partial void OnControlIdChanging(string value);
    partial void OnControlIdChanged();
    partial void OnSubsidiaryIdChanging(string value);
    partial void OnSubsidiaryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateOfEntryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEntryChanged();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    partial void OnEntryByChanging(string value);
    partial void OnEntryByChanged();
    #endregion
		
		public SubsidiaryAccount()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._Company = default(EntityRef<Company>);
			this._ControlAccount = default(EntityRef<ControlAccount>);
			this._GroupAccount = default(EntityRef<GroupAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._GroupAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlId", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string ControlId
		{
			get
			{
				return this._ControlId;
			}
			set
			{
				if ((this._ControlId != value))
				{
					if (this._ControlAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnControlIdChanging(value);
					this.SendPropertyChanging();
					this._ControlId = value;
					this.SendPropertyChanged("ControlId");
					this.OnControlIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubsidiaryId", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SubsidiaryId
		{
			get
			{
				return this._SubsidiaryId;
			}
			set
			{
				if ((this._SubsidiaryId != value))
				{
					this.OnSubsidiaryIdChanging(value);
					this.SendPropertyChanging();
					this._SubsidiaryId = value;
					this.SendPropertyChanged("SubsidiaryId");
					this.OnSubsidiaryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this.OnDateOfEntryChanging(value);
					this.SendPropertyChanging();
					this._DateOfEntry = value;
					this.SendPropertyChanged("DateOfEntry");
					this.OnDateOfEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryBy", DbType="VarChar(10)")]
		public string EntryBy
		{
			get
			{
				return this._EntryBy;
			}
			set
			{
				if ((this._EntryBy != value))
				{
					this.OnEntryByChanging(value);
					this.SendPropertyChanging();
					this._EntryBy = value;
					this.SendPropertyChanged("EntryBy");
					this.OnEntryByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubsidiaryAccount_Account", Storage="_Accounts", ThisKey="SubsidiaryId", OtherKey="SubsidiaryId")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_SubsidiaryAccount", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.SubsidiaryAccounts.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.SubsidiaryAccounts.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(string);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ControlAccount_SubsidiaryAccount", Storage="_ControlAccount", ThisKey="ControlId", OtherKey="ControlId", IsForeignKey=true)]
		public ControlAccount ControlAccount
		{
			get
			{
				return this._ControlAccount.Entity;
			}
			set
			{
				ControlAccount previousValue = this._ControlAccount.Entity;
				if (((previousValue != value) 
							|| (this._ControlAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ControlAccount.Entity = null;
						previousValue.SubsidiaryAccounts.Remove(this);
					}
					this._ControlAccount.Entity = value;
					if ((value != null))
					{
						value.SubsidiaryAccounts.Add(this);
						this._ControlId = value.ControlId;
					}
					else
					{
						this._ControlId = default(string);
					}
					this.SendPropertyChanged("ControlAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupAccount_SubsidiaryAccount", Storage="_GroupAccount", ThisKey="GroupId", OtherKey="GroupId", IsForeignKey=true)]
		public GroupAccount GroupAccount
		{
			get
			{
				return this._GroupAccount.Entity;
			}
			set
			{
				GroupAccount previousValue = this._GroupAccount.Entity;
				if (((previousValue != value) 
							|| (this._GroupAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupAccount.Entity = null;
						previousValue.SubsidiaryAccounts.Remove(this);
					}
					this._GroupAccount.Entity = value;
					if ((value != null))
					{
						value.SubsidiaryAccounts.Add(this);
						this._GroupId = value.GroupId;
					}
					else
					{
						this._GroupId = default(string);
					}
					this.SendPropertyChanged("GroupAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.SubsidiaryAccount = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.SubsidiaryAccount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserDepartment")]
	public partial class UserDepartment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DepartmentId;
		
		private string _Name;
		
		private string _CompanyId;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private string _EntryBy;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIdChanging(string value);
    partial void OnDepartmentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    partial void OnDateOfEntryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEntryChanged();
    partial void OnEntryByChanging(string value);
    partial void OnEntryByChanged();
    #endregion
		
		public UserDepartment()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this.OnDateOfEntryChanging(value);
					this.SendPropertyChanging();
					this._DateOfEntry = value;
					this.SendPropertyChanged("DateOfEntry");
					this.OnDateOfEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryBy", DbType="VarChar(10)")]
		public string EntryBy
		{
			get
			{
				return this._EntryBy;
			}
			set
			{
				if ((this._EntryBy != value))
				{
					this.OnEntryByChanging(value);
					this.SendPropertyChanging();
					this._EntryBy = value;
					this.SendPropertyChanged("EntryBy");
					this.OnEntryByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserDepartment_User", Storage="_Users", ThisKey="DepartmentId", OtherKey="DepartmentId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserDepartment = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserDepartment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLevel")]
	public partial class UserLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LevelId;
		
		private string _Name;
		
		private string _CompanyId;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private string _EntryBy;
		
		private EntitySet<User> _Users;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLevelIdChanging(string value);
    partial void OnLevelIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    partial void OnDateOfEntryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEntryChanged();
    partial void OnEntryByChanging(string value);
    partial void OnEntryByChanged();
    #endregion
		
		public UserLevel()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelId", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LevelId
		{
			get
			{
				return this._LevelId;
			}
			set
			{
				if ((this._LevelId != value))
				{
					this.OnLevelIdChanging(value);
					this.SendPropertyChanging();
					this._LevelId = value;
					this.SendPropertyChanged("LevelId");
					this.OnLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this.OnDateOfEntryChanging(value);
					this.SendPropertyChanging();
					this._DateOfEntry = value;
					this.SendPropertyChanged("DateOfEntry");
					this.OnDateOfEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryBy", DbType="VarChar(10)")]
		public string EntryBy
		{
			get
			{
				return this._EntryBy;
			}
			set
			{
				if ((this._EntryBy != value))
				{
					this.OnEntryByChanging(value);
					this.SendPropertyChanging();
					this._EntryBy = value;
					this.SendPropertyChanged("EntryBy");
					this.OnEntryByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserLevel_User", Storage="_Users", ThisKey="LevelId", OtherKey="LevelId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_UserLevel", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.UserLevels.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.UserLevels.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(string);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserLevel = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLoginAssign")]
	public partial class UserLoginAssign
	{
		
		private string _UserName;
		
		private string _CompanyId;
		
		private string _LocationId;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private string _EntryBy;
		
		public UserLoginAssign()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(10)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this._CompanyId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="VarChar(2)")]
		public string LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this._LocationId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this._DateOfEntry = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryBy", DbType="VarChar(10)")]
		public string EntryBy
		{
			get
			{
				return this._EntryBy;
			}
			set
			{
				if ((this._EntryBy != value))
				{
					this._EntryBy = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DepartmentId;
		
		private string _LevelId;
		
		private string _UserName;
		
		private string _FullName;
		
		private string _Password;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private System.Nullable<bool> _FirstLogIn;
		
		private System.Nullable<double> _ActiveDays;
		
		private System.Nullable<System.DateTime> _LastActivated;
		
		private string _CompanyId;
		
		private string _EntryBy;
		
		private EntitySet<ControlSecurityAssign> _ControlSecurityAssigns;
		
		private EntitySet<MenuSecurityAssign> _MenuSecurityAssigns;
		
		private EntitySet<Voucher> _Vouchers;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Company> _Company1;
		
		private EntityRef<UserLevel> _UserLevel;
		
		private EntityRef<UserDepartment> _UserDepartment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIdChanging(string value);
    partial void OnDepartmentIdChanged();
    partial void OnLevelIdChanging(string value);
    partial void OnLevelIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnDateOfEntryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEntryChanged();
    partial void OnFirstLogInChanging(System.Nullable<bool> value);
    partial void OnFirstLogInChanged();
    partial void OnActiveDaysChanging(System.Nullable<double> value);
    partial void OnActiveDaysChanged();
    partial void OnLastActivatedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastActivatedChanged();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    partial void OnEntryByChanging(string value);
    partial void OnEntryByChanged();
    #endregion
		
		public User()
		{
			this._ControlSecurityAssigns = new EntitySet<ControlSecurityAssign>(new Action<ControlSecurityAssign>(this.attach_ControlSecurityAssigns), new Action<ControlSecurityAssign>(this.detach_ControlSecurityAssigns));
			this._MenuSecurityAssigns = new EntitySet<MenuSecurityAssign>(new Action<MenuSecurityAssign>(this.attach_MenuSecurityAssigns), new Action<MenuSecurityAssign>(this.detach_MenuSecurityAssigns));
			this._Vouchers = new EntitySet<Voucher>(new Action<Voucher>(this.attach_Vouchers), new Action<Voucher>(this.detach_Vouchers));
			this._Company = default(EntityRef<Company>);
			this._Company1 = default(EntityRef<Company>);
			this._UserLevel = default(EntityRef<UserLevel>);
			this._UserDepartment = default(EntityRef<UserDepartment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="VarChar(3)")]
		public string DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._UserDepartment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelId", DbType="VarChar(3)")]
		public string LevelId
		{
			get
			{
				return this._LevelId;
			}
			set
			{
				if ((this._LevelId != value))
				{
					if (this._UserLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLevelIdChanging(value);
					this.SendPropertyChanging();
					this._LevelId = value;
					this.SendPropertyChanged("LevelId");
					this.OnLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="VarChar(50)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(3)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this.OnDateOfEntryChanging(value);
					this.SendPropertyChanging();
					this._DateOfEntry = value;
					this.SendPropertyChanged("DateOfEntry");
					this.OnDateOfEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstLogIn", DbType="Bit")]
		public System.Nullable<bool> FirstLogIn
		{
			get
			{
				return this._FirstLogIn;
			}
			set
			{
				if ((this._FirstLogIn != value))
				{
					this.OnFirstLogInChanging(value);
					this.SendPropertyChanging();
					this._FirstLogIn = value;
					this.SendPropertyChanged("FirstLogIn");
					this.OnFirstLogInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveDays", DbType="Float")]
		public System.Nullable<double> ActiveDays
		{
			get
			{
				return this._ActiveDays;
			}
			set
			{
				if ((this._ActiveDays != value))
				{
					this.OnActiveDaysChanging(value);
					this.SendPropertyChanging();
					this._ActiveDays = value;
					this.SendPropertyChanged("ActiveDays");
					this.OnActiveDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivated", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastActivated
		{
			get
			{
				return this._LastActivated;
			}
			set
			{
				if ((this._LastActivated != value))
				{
					this.OnLastActivatedChanging(value);
					this.SendPropertyChanging();
					this._LastActivated = value;
					this.SendPropertyChanged("LastActivated");
					this.OnLastActivatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if ((this._Company.HasLoadedOrAssignedValue || this._Company1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryBy", DbType="VarChar(50)")]
		public string EntryBy
		{
			get
			{
				return this._EntryBy;
			}
			set
			{
				if ((this._EntryBy != value))
				{
					this.OnEntryByChanging(value);
					this.SendPropertyChanging();
					this._EntryBy = value;
					this.SendPropertyChanged("EntryBy");
					this.OnEntryByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ControlSecurityAssign", Storage="_ControlSecurityAssigns", ThisKey="UserName", OtherKey="UserName")]
		public EntitySet<ControlSecurityAssign> ControlSecurityAssigns
		{
			get
			{
				return this._ControlSecurityAssigns;
			}
			set
			{
				this._ControlSecurityAssigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MenuSecurityAssign", Storage="_MenuSecurityAssigns", ThisKey="UserName", OtherKey="UserName")]
		public EntitySet<MenuSecurityAssign> MenuSecurityAssigns
		{
			get
			{
				return this._MenuSecurityAssigns;
			}
			set
			{
				this._MenuSecurityAssigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Voucher", Storage="_Vouchers", ThisKey="UserName", OtherKey="EntryBy")]
		public EntitySet<Voucher> Vouchers
		{
			get
			{
				return this._Vouchers;
			}
			set
			{
				this._Vouchers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_User", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(string);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_User1", Storage="_Company1", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company1
		{
			get
			{
				return this._Company1.Entity;
			}
			set
			{
				Company previousValue = this._Company1.Entity;
				if (((previousValue != value) 
							|| (this._Company1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company1.Entity = null;
						previousValue.Users1.Remove(this);
					}
					this._Company1.Entity = value;
					if ((value != null))
					{
						value.Users1.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(string);
					}
					this.SendPropertyChanged("Company1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserLevel_User", Storage="_UserLevel", ThisKey="LevelId", OtherKey="LevelId", IsForeignKey=true)]
		public UserLevel UserLevel
		{
			get
			{
				return this._UserLevel.Entity;
			}
			set
			{
				UserLevel previousValue = this._UserLevel.Entity;
				if (((previousValue != value) 
							|| (this._UserLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserLevel.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._UserLevel.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._LevelId = value.LevelId;
					}
					else
					{
						this._LevelId = default(string);
					}
					this.SendPropertyChanged("UserLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserDepartment_User", Storage="_UserDepartment", ThisKey="DepartmentId", OtherKey="DepartmentId", IsForeignKey=true)]
		public UserDepartment UserDepartment
		{
			get
			{
				return this._UserDepartment.Entity;
			}
			set
			{
				UserDepartment previousValue = this._UserDepartment.Entity;
				if (((previousValue != value) 
							|| (this._UserDepartment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserDepartment.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._UserDepartment.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._DepartmentId = value.DepartmentId;
					}
					else
					{
						this._DepartmentId = default(string);
					}
					this.SendPropertyChanged("UserDepartment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ControlSecurityAssigns(ControlSecurityAssign entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ControlSecurityAssigns(ControlSecurityAssign entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MenuSecurityAssigns(MenuSecurityAssign entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MenuSecurityAssigns(MenuSecurityAssign entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Vouchers(Voucher entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Vouchers(Voucher entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersDetail")]
	public partial class UsersDetail
	{
		
		private string _UserName;
		
		private string _PreviousPassword;
		
		private string _NewPassword;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private string _EntryBy;
		
		private string _CompanyId;
		
		public UsersDetail()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(10)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousPassword", DbType="VarChar(10)")]
		public string PreviousPassword
		{
			get
			{
				return this._PreviousPassword;
			}
			set
			{
				if ((this._PreviousPassword != value))
				{
					this._PreviousPassword = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewPassword", DbType="VarChar(10)")]
		public string NewPassword
		{
			get
			{
				return this._NewPassword;
			}
			set
			{
				if ((this._NewPassword != value))
				{
					this._NewPassword = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this._DateOfEntry = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryBy", DbType="VarChar(10)")]
		public string EntryBy
		{
			get
			{
				return this._EntryBy;
			}
			set
			{
				if ((this._EntryBy != value))
				{
					this._EntryBy = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this._CompanyId = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Voucher")]
	public partial class Voucher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VoucherNo;
		
		private System.Nullable<System.DateTime> _VoucherDate;
		
		private string _Description;
		
		private string _EntryBy;
		
		private string _Posted;
		
		private string _PostedBy;
		
		private System.Nullable<System.DateTime> _PostingDate;
		
		private string _Type;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private string _CompanyId;
		
		private string _LocationId;
		
		private string _ProjectId;
		
		private EntitySet<AllTransaction> _AllTransactions;
		
		private EntitySet<VoucherDetail> _VoucherDetails;
		
		private EntitySet<YearEndClosing> _YearEndClosings;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<User> _User;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVoucherNoChanging(string value);
    partial void OnVoucherNoChanged();
    partial void OnVoucherDateChanging(System.Nullable<System.DateTime> value);
    partial void OnVoucherDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEntryByChanging(string value);
    partial void OnEntryByChanged();
    partial void OnPostedChanging(string value);
    partial void OnPostedChanged();
    partial void OnPostedByChanging(string value);
    partial void OnPostedByChanged();
    partial void OnPostingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPostingDateChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnDateOfEntryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEntryChanged();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    partial void OnLocationIdChanging(string value);
    partial void OnLocationIdChanged();
    partial void OnProjectIdChanging(string value);
    partial void OnProjectIdChanged();
    #endregion
		
		public Voucher()
		{
			this._AllTransactions = new EntitySet<AllTransaction>(new Action<AllTransaction>(this.attach_AllTransactions), new Action<AllTransaction>(this.detach_AllTransactions));
			this._VoucherDetails = new EntitySet<VoucherDetail>(new Action<VoucherDetail>(this.attach_VoucherDetails), new Action<VoucherDetail>(this.detach_VoucherDetails));
			this._YearEndClosings = new EntitySet<YearEndClosing>(new Action<YearEndClosing>(this.attach_YearEndClosings), new Action<YearEndClosing>(this.detach_YearEndClosings));
			this._Company = default(EntityRef<Company>);
			this._User = default(EntityRef<User>);
			this._Location = default(EntityRef<Location>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoucherNo", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VoucherNo
		{
			get
			{
				return this._VoucherNo;
			}
			set
			{
				if ((this._VoucherNo != value))
				{
					this.OnVoucherNoChanging(value);
					this.SendPropertyChanging();
					this._VoucherNo = value;
					this.SendPropertyChanged("VoucherNo");
					this.OnVoucherNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoucherDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> VoucherDate
		{
			get
			{
				return this._VoucherDate;
			}
			set
			{
				if ((this._VoucherDate != value))
				{
					this.OnVoucherDateChanging(value);
					this.SendPropertyChanging();
					this._VoucherDate = value;
					this.SendPropertyChanged("VoucherDate");
					this.OnVoucherDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryBy", DbType="VarChar(10)")]
		public string EntryBy
		{
			get
			{
				return this._EntryBy;
			}
			set
			{
				if ((this._EntryBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntryByChanging(value);
					this.SendPropertyChanging();
					this._EntryBy = value;
					this.SendPropertyChanged("EntryBy");
					this.OnEntryByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Posted", DbType="VarChar(1)")]
		public string Posted
		{
			get
			{
				return this._Posted;
			}
			set
			{
				if ((this._Posted != value))
				{
					this.OnPostedChanging(value);
					this.SendPropertyChanging();
					this._Posted = value;
					this.SendPropertyChanged("Posted");
					this.OnPostedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostedBy", DbType="VarChar(10)")]
		public string PostedBy
		{
			get
			{
				return this._PostedBy;
			}
			set
			{
				if ((this._PostedBy != value))
				{
					this.OnPostedByChanging(value);
					this.SendPropertyChanging();
					this._PostedBy = value;
					this.SendPropertyChanged("PostedBy");
					this.OnPostedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostingDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PostingDate
		{
			get
			{
				return this._PostingDate;
			}
			set
			{
				if ((this._PostingDate != value))
				{
					this.OnPostingDateChanging(value);
					this.SendPropertyChanging();
					this._PostingDate = value;
					this.SendPropertyChanged("PostingDate");
					this.OnPostingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(10)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this.OnDateOfEntryChanging(value);
					this.SendPropertyChanging();
					this._DateOfEntry = value;
					this.SendPropertyChanged("DateOfEntry");
					this.OnDateOfEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="VarChar(2)")]
		public string LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="VarChar(3)")]
		public string ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voucher_AllTransaction", Storage="_AllTransactions", ThisKey="VoucherNo", OtherKey="VoucherNo")]
		public EntitySet<AllTransaction> AllTransactions
		{
			get
			{
				return this._AllTransactions;
			}
			set
			{
				this._AllTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voucher_VoucherDetail", Storage="_VoucherDetails", ThisKey="VoucherNo", OtherKey="VoucherNo")]
		public EntitySet<VoucherDetail> VoucherDetails
		{
			get
			{
				return this._VoucherDetails;
			}
			set
			{
				this._VoucherDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voucher_YearEndClosing", Storage="_YearEndClosings", ThisKey="VoucherNo", OtherKey="VoucherNo")]
		public EntitySet<YearEndClosing> YearEndClosings
		{
			get
			{
				return this._YearEndClosings;
			}
			set
			{
				this._YearEndClosings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Voucher", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Vouchers.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Vouchers.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(string);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Voucher", Storage="_User", ThisKey="EntryBy", OtherKey="UserName", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Vouchers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Vouchers.Add(this);
						this._EntryBy = value.UserName;
					}
					else
					{
						this._EntryBy = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Voucher", Storage="_Location", ThisKey="LocationId", OtherKey="LocationId", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Vouchers.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Vouchers.Add(this);
						this._LocationId = value.LocationId;
					}
					else
					{
						this._LocationId = default(string);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Voucher", Storage="_Project", ThisKey="ProjectId", OtherKey="ProjectId", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Vouchers.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Vouchers.Add(this);
						this._ProjectId = value.ProjectId;
					}
					else
					{
						this._ProjectId = default(string);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AllTransactions(AllTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Voucher = this;
		}
		
		private void detach_AllTransactions(AllTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Voucher = null;
		}
		
		private void attach_VoucherDetails(VoucherDetail entity)
		{
			this.SendPropertyChanging();
			entity.Voucher = this;
		}
		
		private void detach_VoucherDetails(VoucherDetail entity)
		{
			this.SendPropertyChanging();
			entity.Voucher = null;
		}
		
		private void attach_YearEndClosings(YearEndClosing entity)
		{
			this.SendPropertyChanging();
			entity.Voucher = this;
		}
		
		private void detach_YearEndClosings(YearEndClosing entity)
		{
			this.SendPropertyChanging();
			entity.Voucher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VoucherDetail")]
	public partial class VoucherDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _VoucherDetailID;
		
		private string _VoucherNo;
		
		private string _Particulars;
		
		private string _AccountsId;
		
		private System.Nullable<double> _Debit;
		
		private System.Nullable<double> _Credit;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Voucher> _Voucher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVoucherDetailIDChanging(System.Guid value);
    partial void OnVoucherDetailIDChanged();
    partial void OnVoucherNoChanging(string value);
    partial void OnVoucherNoChanged();
    partial void OnParticularsChanging(string value);
    partial void OnParticularsChanged();
    partial void OnAccountsIdChanging(string value);
    partial void OnAccountsIdChanged();
    partial void OnDebitChanging(System.Nullable<double> value);
    partial void OnDebitChanged();
    partial void OnCreditChanging(System.Nullable<double> value);
    partial void OnCreditChanged();
    #endregion
		
		public VoucherDetail()
		{
			this._Account = default(EntityRef<Account>);
			this._Voucher = default(EntityRef<Voucher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoucherDetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid VoucherDetailID
		{
			get
			{
				return this._VoucherDetailID;
			}
			set
			{
				if ((this._VoucherDetailID != value))
				{
					this.OnVoucherDetailIDChanging(value);
					this.SendPropertyChanging();
					this._VoucherDetailID = value;
					this.SendPropertyChanged("VoucherDetailID");
					this.OnVoucherDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoucherNo", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string VoucherNo
		{
			get
			{
				return this._VoucherNo;
			}
			set
			{
				if ((this._VoucherNo != value))
				{
					if (this._Voucher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoucherNoChanging(value);
					this.SendPropertyChanging();
					this._VoucherNo = value;
					this.SendPropertyChanged("VoucherNo");
					this.OnVoucherNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Particulars", DbType="VarChar(100)")]
		public string Particulars
		{
			get
			{
				return this._Particulars;
			}
			set
			{
				if ((this._Particulars != value))
				{
					this.OnParticularsChanging(value);
					this.SendPropertyChanging();
					this._Particulars = value;
					this.SendPropertyChanged("Particulars");
					this.OnParticularsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountsId", DbType="VarChar(20)")]
		public string AccountsId
		{
			get
			{
				return this._AccountsId;
			}
			set
			{
				if ((this._AccountsId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountsIdChanging(value);
					this.SendPropertyChanging();
					this._AccountsId = value;
					this.SendPropertyChanged("AccountsId");
					this.OnAccountsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Debit", DbType="Float")]
		public System.Nullable<double> Debit
		{
			get
			{
				return this._Debit;
			}
			set
			{
				if ((this._Debit != value))
				{
					this.OnDebitChanging(value);
					this.SendPropertyChanging();
					this._Debit = value;
					this.SendPropertyChanged("Debit");
					this.OnDebitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Credit", DbType="Float")]
		public System.Nullable<double> Credit
		{
			get
			{
				return this._Credit;
			}
			set
			{
				if ((this._Credit != value))
				{
					this.OnCreditChanging(value);
					this.SendPropertyChanging();
					this._Credit = value;
					this.SendPropertyChanged("Credit");
					this.OnCreditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_VoucherDetail", Storage="_Account", ThisKey="AccountsId", OtherKey="AccountsId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.VoucherDetails.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.VoucherDetails.Add(this);
						this._AccountsId = value.AccountsId;
					}
					else
					{
						this._AccountsId = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voucher_VoucherDetail", Storage="_Voucher", ThisKey="VoucherNo", OtherKey="VoucherNo", IsForeignKey=true)]
		public Voucher Voucher
		{
			get
			{
				return this._Voucher.Entity;
			}
			set
			{
				Voucher previousValue = this._Voucher.Entity;
				if (((previousValue != value) 
							|| (this._Voucher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Voucher.Entity = null;
						previousValue.VoucherDetails.Remove(this);
					}
					this._Voucher.Entity = value;
					if ((value != null))
					{
						value.VoucherDetails.Add(this);
						this._VoucherNo = value.VoucherNo;
					}
					else
					{
						this._VoucherNo = default(string);
					}
					this.SendPropertyChanged("Voucher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.YearEndClosing")]
	public partial class YearEndClosing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _YearEndClosingID;
		
		private double _AccountingYear;
		
		private double _AccountingMonth;
		
		private double _AccountingDate;
		
		private System.Nullable<System.DateTime> _ProcessDate;
		
		private string _EntryBy;
		
		private string _Approved;
		
		private string _ApprovedBy;
		
		private System.Nullable<double> _ClosingStock;
		
		private string _VoucherNo;
		
		private string _CompanyId;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private string _LocationId;
		
		private string _ProjectId;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<Voucher> _Voucher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnYearEndClosingIDChanging(System.Guid value);
    partial void OnYearEndClosingIDChanged();
    partial void OnAccountingYearChanging(double value);
    partial void OnAccountingYearChanged();
    partial void OnAccountingMonthChanging(double value);
    partial void OnAccountingMonthChanged();
    partial void OnAccountingDateChanging(double value);
    partial void OnAccountingDateChanged();
    partial void OnProcessDateChanging(System.Nullable<System.DateTime> value);
    partial void OnProcessDateChanged();
    partial void OnEntryByChanging(string value);
    partial void OnEntryByChanged();
    partial void OnApprovedChanging(string value);
    partial void OnApprovedChanged();
    partial void OnApprovedByChanging(string value);
    partial void OnApprovedByChanged();
    partial void OnClosingStockChanging(System.Nullable<double> value);
    partial void OnClosingStockChanged();
    partial void OnVoucherNoChanging(string value);
    partial void OnVoucherNoChanged();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    partial void OnDateOfEntryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEntryChanged();
    partial void OnLocationIdChanging(string value);
    partial void OnLocationIdChanged();
    partial void OnProjectIdChanging(string value);
    partial void OnProjectIdChanged();
    #endregion
		
		public YearEndClosing()
		{
			this._Project = default(EntityRef<Project>);
			this._Voucher = default(EntityRef<Voucher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearEndClosingID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid YearEndClosingID
		{
			get
			{
				return this._YearEndClosingID;
			}
			set
			{
				if ((this._YearEndClosingID != value))
				{
					this.OnYearEndClosingIDChanging(value);
					this.SendPropertyChanging();
					this._YearEndClosingID = value;
					this.SendPropertyChanged("YearEndClosingID");
					this.OnYearEndClosingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountingYear", DbType="Float NOT NULL", IsPrimaryKey=true)]
		public double AccountingYear
		{
			get
			{
				return this._AccountingYear;
			}
			set
			{
				if ((this._AccountingYear != value))
				{
					this.OnAccountingYearChanging(value);
					this.SendPropertyChanging();
					this._AccountingYear = value;
					this.SendPropertyChanged("AccountingYear");
					this.OnAccountingYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountingMonth", DbType="Float NOT NULL", IsPrimaryKey=true)]
		public double AccountingMonth
		{
			get
			{
				return this._AccountingMonth;
			}
			set
			{
				if ((this._AccountingMonth != value))
				{
					this.OnAccountingMonthChanging(value);
					this.SendPropertyChanging();
					this._AccountingMonth = value;
					this.SendPropertyChanged("AccountingMonth");
					this.OnAccountingMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountingDate", DbType="Float NOT NULL", IsPrimaryKey=true)]
		public double AccountingDate
		{
			get
			{
				return this._AccountingDate;
			}
			set
			{
				if ((this._AccountingDate != value))
				{
					this.OnAccountingDateChanging(value);
					this.SendPropertyChanging();
					this._AccountingDate = value;
					this.SendPropertyChanged("AccountingDate");
					this.OnAccountingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ProcessDate
		{
			get
			{
				return this._ProcessDate;
			}
			set
			{
				if ((this._ProcessDate != value))
				{
					this.OnProcessDateChanging(value);
					this.SendPropertyChanging();
					this._ProcessDate = value;
					this.SendPropertyChanged("ProcessDate");
					this.OnProcessDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryBy", DbType="VarChar(10)")]
		public string EntryBy
		{
			get
			{
				return this._EntryBy;
			}
			set
			{
				if ((this._EntryBy != value))
				{
					this.OnEntryByChanging(value);
					this.SendPropertyChanging();
					this._EntryBy = value;
					this.SendPropertyChanged("EntryBy");
					this.OnEntryByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approved", DbType="VarChar(1)")]
		public string Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedBy", DbType="VarChar(10)")]
		public string ApprovedBy
		{
			get
			{
				return this._ApprovedBy;
			}
			set
			{
				if ((this._ApprovedBy != value))
				{
					this.OnApprovedByChanging(value);
					this.SendPropertyChanging();
					this._ApprovedBy = value;
					this.SendPropertyChanged("ApprovedBy");
					this.OnApprovedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosingStock", DbType="Float")]
		public System.Nullable<double> ClosingStock
		{
			get
			{
				return this._ClosingStock;
			}
			set
			{
				if ((this._ClosingStock != value))
				{
					this.OnClosingStockChanging(value);
					this.SendPropertyChanging();
					this._ClosingStock = value;
					this.SendPropertyChanged("ClosingStock");
					this.OnClosingStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoucherNo", DbType="VarChar(30)")]
		public string VoucherNo
		{
			get
			{
				return this._VoucherNo;
			}
			set
			{
				if ((this._VoucherNo != value))
				{
					if (this._Voucher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoucherNoChanging(value);
					this.SendPropertyChanging();
					this._VoucherNo = value;
					this.SendPropertyChanged("VoucherNo");
					this.OnVoucherNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this.OnDateOfEntryChanging(value);
					this.SendPropertyChanging();
					this._DateOfEntry = value;
					this.SendPropertyChanged("DateOfEntry");
					this.OnDateOfEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="VarChar(2)")]
		public string LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="VarChar(3)")]
		public string ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_YearEndClosing", Storage="_Project", ThisKey="ProjectId", OtherKey="ProjectId", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.YearEndClosings.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.YearEndClosings.Add(this);
						this._ProjectId = value.ProjectId;
					}
					else
					{
						this._ProjectId = default(string);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voucher_YearEndClosing", Storage="_Voucher", ThisKey="VoucherNo", OtherKey="VoucherNo", IsForeignKey=true)]
		public Voucher Voucher
		{
			get
			{
				return this._Voucher.Entity;
			}
			set
			{
				Voucher previousValue = this._Voucher.Entity;
				if (((previousValue != value) 
							|| (this._Voucher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Voucher.Entity = null;
						previousValue.YearEndClosings.Remove(this);
					}
					this._Voucher.Entity = value;
					if ((value != null))
					{
						value.YearEndClosings.Add(this);
						this._VoucherNo = value.VoucherNo;
					}
					else
					{
						this._VoucherNo = default(string);
					}
					this.SendPropertyChanged("Voucher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IDNumber")]
	public partial class IDNumber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _SlNo;
		
		private string _IDNo;
		
		private string _IDTypeId;
		
		private string _CompanyId;
		
		private string _LocationId;
		
		private string _EntryBy;
		
		private System.Nullable<System.DateTime> _DateOfEntry;
		
		private System.Nullable<decimal> _IDYear;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<IDType> _IDType;
		
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSlNoChanging(decimal value);
    partial void OnSlNoChanged();
    partial void OnIDNoChanging(string value);
    partial void OnIDNoChanged();
    partial void OnIDTypeIdChanging(string value);
    partial void OnIDTypeIdChanged();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    partial void OnLocationIdChanging(string value);
    partial void OnLocationIdChanged();
    partial void OnEntryByChanging(string value);
    partial void OnEntryByChanged();
    partial void OnDateOfEntryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEntryChanged();
    partial void OnIDYearChanging(System.Nullable<decimal> value);
    partial void OnIDYearChanged();
    #endregion
		
		public IDNumber()
		{
			this._Company = default(EntityRef<Company>);
			this._IDType = default(EntityRef<IDType>);
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlNo", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal SlNo
		{
			get
			{
				return this._SlNo;
			}
			set
			{
				if ((this._SlNo != value))
				{
					this.OnSlNoChanging(value);
					this.SendPropertyChanging();
					this._SlNo = value;
					this.SendPropertyChanged("SlNo");
					this.OnSlNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNo", DbType="VarChar(35)")]
		public string IDNo
		{
			get
			{
				return this._IDNo;
			}
			set
			{
				if ((this._IDNo != value))
				{
					this.OnIDNoChanging(value);
					this.SendPropertyChanging();
					this._IDNo = value;
					this.SendPropertyChanged("IDNo");
					this.OnIDNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTypeId", DbType="VarChar(3)")]
		public string IDTypeId
		{
			get
			{
				return this._IDTypeId;
			}
			set
			{
				if ((this._IDTypeId != value))
				{
					if (this._IDType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDTypeIdChanging(value);
					this.SendPropertyChanging();
					this._IDTypeId = value;
					this.SendPropertyChanged("IDTypeId");
					this.OnIDTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="VarChar(2)")]
		public string LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryBy", DbType="VarChar(10)")]
		public string EntryBy
		{
			get
			{
				return this._EntryBy;
			}
			set
			{
				if ((this._EntryBy != value))
				{
					this.OnEntryByChanging(value);
					this.SendPropertyChanging();
					this._EntryBy = value;
					this.SendPropertyChanged("EntryBy");
					this.OnEntryByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfEntry
		{
			get
			{
				return this._DateOfEntry;
			}
			set
			{
				if ((this._DateOfEntry != value))
				{
					this.OnDateOfEntryChanging(value);
					this.SendPropertyChanging();
					this._DateOfEntry = value;
					this.SendPropertyChanged("DateOfEntry");
					this.OnDateOfEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDYear", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> IDYear
		{
			get
			{
				return this._IDYear;
			}
			set
			{
				if ((this._IDYear != value))
				{
					this.OnIDYearChanging(value);
					this.SendPropertyChanging();
					this._IDYear = value;
					this.SendPropertyChanged("IDYear");
					this.OnIDYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_IDNumber", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.IDNumbers.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.IDNumbers.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(string);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IDType_IDNumber", Storage="_IDType", ThisKey="IDTypeId", OtherKey="IDTypeId", IsForeignKey=true)]
		public IDType IDType
		{
			get
			{
				return this._IDType.Entity;
			}
			set
			{
				IDType previousValue = this._IDType.Entity;
				if (((previousValue != value) 
							|| (this._IDType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IDType.Entity = null;
						previousValue.IDNumbers.Remove(this);
					}
					this._IDType.Entity = value;
					if ((value != null))
					{
						value.IDNumbers.Add(this);
						this._IDTypeId = value.IDTypeId;
					}
					else
					{
						this._IDTypeId = default(string);
					}
					this.SendPropertyChanged("IDType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_IDNumber", Storage="_Location", ThisKey="LocationId", OtherKey="LocationId", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.IDNumbers.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.IDNumbers.Add(this);
						this._LocationId = value.LocationId;
					}
					else
					{
						this._LocationId = default(string);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserEntryExit")]
	public partial class UserEntryExit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserEntryExitID;
		
		private string _Name;
		
		private string _EntryTime;
		
		private System.Nullable<System.DateTime> _EntryDate;
		
		private System.Nullable<System.DateTime> _ExitDate;
		
		private string _ExitTime;
		
		private string _CompanyId;
		
		private string _LocationId;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserEntryExitIDChanging(string value);
    partial void OnUserEntryExitIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEntryTimeChanging(string value);
    partial void OnEntryTimeChanged();
    partial void OnEntryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntryDateChanged();
    partial void OnExitDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExitDateChanged();
    partial void OnExitTimeChanging(string value);
    partial void OnExitTimeChanged();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    partial void OnLocationIdChanging(string value);
    partial void OnLocationIdChanged();
    #endregion
		
		public UserEntryExit()
		{
			this._Company = default(EntityRef<Company>);
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEntryExitID", DbType="VarChar(25) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserEntryExitID
		{
			get
			{
				return this._UserEntryExitID;
			}
			set
			{
				if ((this._UserEntryExitID != value))
				{
					this.OnUserEntryExitIDChanging(value);
					this.SendPropertyChanging();
					this._UserEntryExitID = value;
					this.SendPropertyChanged("UserEntryExitID");
					this.OnUserEntryExitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryTime", DbType="VarChar(11)")]
		public string EntryTime
		{
			get
			{
				return this._EntryTime;
			}
			set
			{
				if ((this._EntryTime != value))
				{
					this.OnEntryTimeChanging(value);
					this.SendPropertyChanging();
					this._EntryTime = value;
					this.SendPropertyChanged("EntryTime");
					this.OnEntryTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged("EntryDate");
					this.OnEntryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExitDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExitDate
		{
			get
			{
				return this._ExitDate;
			}
			set
			{
				if ((this._ExitDate != value))
				{
					this.OnExitDateChanging(value);
					this.SendPropertyChanging();
					this._ExitDate = value;
					this.SendPropertyChanged("ExitDate");
					this.OnExitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExitTime", DbType="VarChar(11)")]
		public string ExitTime
		{
			get
			{
				return this._ExitTime;
			}
			set
			{
				if ((this._ExitTime != value))
				{
					this.OnExitTimeChanging(value);
					this.SendPropertyChanging();
					this._ExitTime = value;
					this.SendPropertyChanged("ExitTime");
					this.OnExitTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="VarChar(3)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="VarChar(2)")]
		public string LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_UserEntryExit", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.UserEntryExits.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.UserEntryExits.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(string);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_UserEntryExit", Storage="_Location", ThisKey="LocationId", OtherKey="LocationId", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.UserEntryExits.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.UserEntryExits.Add(this);
						this._LocationId = value.LocationId;
					}
					else
					{
						this._LocationId = default(string);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
